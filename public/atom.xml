<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lishaoh</title>
  <icon>https://www.gravatar.com/avatar/8b692ae190456dc7b2aff5f5c40646dc</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.lookpeakfans.xyz/"/>
  <updated>2018-07-19T03:05:12.000Z</updated>
  <id>www.lookpeakfans.xyz/</id>
  
  <author>
    <name>lishaoh</name>
    <email>lsh94753@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="www.lookpeakfans.xyz/2018/07/19/%E4%B8%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%97%B4%E7%9A%84%E7%9B%B8%E7%88%B1%E7%9B%B8%E6%9D%80/"/>
    <id>www.lookpeakfans.xyz/2018/07/19/与小程序间的相爱相杀/</id>
    <published>2018-07-19T03:05:12.000Z</published>
    <updated>2018-07-19T03:05:12.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PDF.js预览文件</title>
    <link href="www.lookpeakfans.xyz/2018/05/18/%E9%A2%84%E8%A7%88PDF%E6%96%87%E4%BB%B6/"/>
    <id>www.lookpeakfans.xyz/2018/05/18/预览PDF文件/</id>
    <published>2018-05-18T10:35:07.000Z</published>
    <updated>2018-05-18T10:35:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上找到很多前端实现文件预览方法，但都无法解决我的问题，产品需求中将文件上传到腾讯云的对象存储，返回一个URL，这个URL无法在网页中预览，浏览器将这个URL直接本地下载文件（下载文件下面说）,最后只能用PDF.js，这是一个开源的js库，直接将PDF文件渲染成canvas，PDF.js框架的魅力所在，为其为HTML5实现的，无需任何本地支持，而且对浏览器的兼容性也是比较好，要求只有一个：浏览器支持HTML5就好了！（不过对于低版本的IE，就只能节哀了！）.不多说，直接贴代码(angular5.0开发):</p><p>在线演示地址：<a href="http://mozilla.github.com/pdf.js/web/viewer.html" target="_blank" rel="noopener">http://mozilla.github.com/pdf.js/web/viewer.html</a></p><p>Demo地址：<a href="http://mozilla.github.io/pdf.js/examples/" target="_blank" rel="noopener">http://mozilla.github.io/pdf.js/examples/</a></p><p>PDF.js可在官网下载  地址：<a href="http://mozilla.github.io/pdf.js/" target="_blank" rel="noopener">http://mozilla.github.io/pdf.js/</a><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"the-canvas"</span> <span class="attr">class</span>=<span class="string">"the-canvas"</span> <span class="attr">style</span>=<span class="string">"position: absolute;</span></span></span><br><span class="line"><span class="tag"><span class="string">  left: 0;</span></span></span><br><span class="line"><span class="tag"><span class="string">  right: 0;</span></span></span><br><span class="line"><span class="tag"><span class="string">  margin: auto;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-t"</span> <span class="attr">style</span>=<span class="string">"position: fixed;</span></span></span><br><span class="line"><span class="tag"><span class="string">  right: 40px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"prev"</span> <span class="attr">nz-button</span> <span class="attr">class</span>=<span class="string">"m-r-md"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"anticon anticon-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"m-r-md"</span>&gt;</span>Page: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"page_num"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> / <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"page_count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"next"</span> <span class="attr">nz-button</span>&gt;</span>Next<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"anticon anticon-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过按钮控制页面加载<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">previewPDF(url) &#123;</span><br><span class="line">   <span class="comment">// url 为PDF文件的链接地址;</span></span><br><span class="line">   <span class="keyword">const</span> vm = <span class="keyword">this</span>;</span><br><span class="line">   <span class="keyword">const</span> pdfjsLib = <span class="built_in">window</span>[<span class="string">'pdfjs-dist/build/pdf'</span>];</span><br><span class="line">   pdfjsLib.GlobalWorkerOptions.workerSrc = <span class="string">'//mozilla.github.io/pdf.js/build/pdf.worker.js'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> pdfDoc = <span class="literal">null</span>,</span><br><span class="line">     pageNum = <span class="number">1</span>,</span><br><span class="line">     pageRendering = <span class="literal">false</span>,</span><br><span class="line">     pageNumPending = <span class="literal">null</span>,</span><br><span class="line">     scale = <span class="number">1.6</span>,</span><br><span class="line">     canvas = vm.el.nativeElement.querySelector(<span class="string">'.the-canvas'</span>),</span><br><span class="line">     ctx = canvas[<span class="string">'getContext'</span>](<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">renderPage</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">     pageRendering = <span class="literal">true</span>;</span><br><span class="line">     pdfDoc.getPage(num).then(<span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">const</span> viewport = page.getViewport(scale);</span><br><span class="line">       canvas[<span class="string">'height'</span>] = viewport.height;</span><br><span class="line">       canvas[<span class="string">'width'</span>] = viewport.width;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> renderContext = &#123;</span><br><span class="line">         canvasContext: ctx,</span><br><span class="line">         viewport: viewport</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">const</span> renderTask = page.render(renderContext);</span><br><span class="line"></span><br><span class="line">       renderTask.promise.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         pageRendering = <span class="literal">false</span>;</span><br><span class="line">         <span class="keyword">if</span> (pageNumPending !== <span class="literal">null</span>) &#123;</span><br><span class="line">           renderPage(pageNumPending);</span><br><span class="line">           pageNumPending = <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">     vm.el.nativeElement.querySelector(<span class="string">'#page_num'</span>).textContent = num;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">queueRenderPage</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (pageRendering) &#123;</span><br><span class="line">       pageNumPending = num;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       renderPage(num);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">onPrevPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (pageNum &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     pageNum--;</span><br><span class="line">     queueRenderPage(pageNum);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   vm.el.nativeElement.querySelector(<span class="string">'#prev'</span>).addEventListener(<span class="string">'click'</span>, onPrevPage);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">onNextPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (pageNum &gt;= pdfDoc.numPages) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     pageNum++;</span><br><span class="line">     queueRenderPage(pageNum);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   vm.el.nativeElement.querySelector(<span class="string">'#next'</span>).addEventListener(<span class="string">'click'</span>, onNextPage);</span><br><span class="line"></span><br><span class="line">   pdfjsLib.getDocument(url).then(<span class="function"><span class="keyword">function</span> (<span class="params">pdfDoc_</span>) </span>&#123;</span><br><span class="line">     pdfDoc = pdfDoc_;</span><br><span class="line">     vm.el.nativeElement.querySelector(<span class="string">'#page_count'</span>).textContent = pdfDoc.numPages;</span><br><span class="line">     renderPage(pageNum);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>结果如下图:<br><img src="/images/pdf.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上找到很多前端实现文件预览方法，但都无法解决我的问题，产品需求中将文件上传到腾讯云的对象存储，返回一个URL，这个URL无法在网页中预览，浏览器将这个URL直接本地下载文件（下载文件下面说）,最后只能用PDF.js，这是一个开源的js库，直接将PDF文件渲染成canvas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS实现文字滚动，类型京东商城公告栏</title>
    <link href="www.lookpeakfans.xyz/2018/05/17/CSS%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E6%BB%9A%E5%8A%A8%EF%BC%8C%E7%B1%BB%E4%BC%BC%E5%85%AC%E5%91%8A%E5%B1%95%E7%A4%BA/"/>
    <id>www.lookpeakfans.xyz/2018/05/17/CSS实现文字滚动，类似公告展示/</id>
    <published>2018-05-17T11:44:26.000Z</published>
    <updated>2018-05-17T11:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>实现文字滚动，第一时间想用swiper进行，但是需求功能较少，不需要引用外部swiper.js，直接用CSS的animate属性实现文字滚动，2秒滚动一次，实现如下:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"notice"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1条公告第1条公告第1条公告第1条公告第1条公告第1条公告<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2条公告第2条公告第2条公告第2条公告第2条公告第2条公告<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3条公告第3条公告第3条公告第3条公告第3条公告第3条公告<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>第4条公告第4条公告第4条公告第4条公告第4条公告第4条公告<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>&#125;<span class="comment">/*先初始化一下默认样式*/</span></span><br><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">300px</span>;<span class="comment">/*单行显示，超出隐藏*/</span></span><br><span class="line"> <span class="attribute">height</span>: <span class="number">35px</span>;<span class="comment">/*固定公告栏显示区域的高度*/</span></span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#b3effe</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.notice</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line"> <span class="attribute">list-style</span>: none;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line"> <span class="comment">/*以下为了单行显示，超出隐藏*/</span></span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line"> <span class="attribute">white-space</span>: nowrap;</span><br><span class="line"> <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noticeUp</span>(<span class="params">obj,top,time</span>) </span>&#123;</span><br><span class="line"> $(obj).animate(&#123;</span><br><span class="line"> marginTop: top</span><br><span class="line"> &#125;, time, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> $(<span class="keyword">this</span>).css(&#123;<span class="attr">marginTop</span>:<span class="string">"0"</span>&#125;).find(<span class="string">":first"</span>).appendTo(<span class="keyword">this</span>);</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> setInterval(<span class="string">"noticeUp('.notice ul','-35px',500)"</span>, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现文字滚动，第一时间想用swiper进行，但是需求功能较少，不需要引用外部swiper.js，直接用CSS的animate属性实现文字滚动，2秒滚动一次，实现如下:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端实现在线预览pdf、word、xls、ppt等文件</title>
    <link href="www.lookpeakfans.xyz/2018/05/17/%E5%89%8D%E7%AB%AF%E9%A2%84%E8%A7%88%E6%96%87%E4%BB%B6/"/>
    <id>www.lookpeakfans.xyz/2018/05/17/前端预览文件/</id>
    <published>2018-05-17T08:33:37.000Z</published>
    <updated>2018-05-17T08:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、前端实现pdf文件在线预览功能"><a href="#1、前端实现pdf文件在线预览功能" class="headerlink" title="1、前端实现pdf文件在线预览功能"></a>1、前端实现pdf文件在线预览功能</h2><h3 id="方式一-通过a标签href属性实现"><a href="#方式一-通过a标签href属性实现" class="headerlink" title="方式一: 通过a标签href属性实现"></a>方式一: 通过a标签href属性实现</h3><p>pdf文件理论上可以在浏览器直接打开预览但是需要打开新页面。在仅仅是预览pdf文件且UI要求不高的情况下可以直接通过a标签href属性实现预览<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"文档地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="方式二-通过jquery插件jquery-media-js实现"><a href="#方式二-通过jquery插件jquery-media-js实现" class="headerlink" title="方式二: 通过jquery插件jquery.media.js实现"></a>方式二: 通过jquery插件jquery.media.js实现</h3><p>这个插件可以实现pdf预览功能（包括其他各种媒体文件）但是对word等类型的文件无能为力。<br>实现方式：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.media.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">html结构：</span><br><span class="line">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"handout_wrap_inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">调用方式：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="javascript"> $(<span class="string">'#handout_wrap_inner'</span>).media(&#123;</span></span><br><span class="line"><span class="javascript">width: <span class="string">'100%'</span>,</span></span><br><span class="line"><span class="javascript">height: <span class="string">'100%'</span>,</span></span><br><span class="line"><span class="javascript">autoplay: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        src:<span class="string">'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf'</span>,</span></span><br><span class="line"><span class="undefined">            &#125;); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="方式三-直接通过页面内嵌iframe"><a href="#方式三-直接通过页面内嵌iframe" class="headerlink" title="方式三: 直接通过页面内嵌iframe"></a>方式三: 直接通过页面内嵌iframe</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$("<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">'"+ this.previewUrl +"'</span> <span class="attr">width</span>=<span class="string">'100%'</span> <span class="attr">height</span>=<span class="string">'362px'</span> <span class="attr">frameborder</span>=<span class="string">'1'</span>&gt;</span>").appendTo($(".video-handouts-preview"));</span><br><span class="line">此外还可以在iframe标签之间提供一个提示类似这样</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">:src</span>=<span class="string">"previewUrl"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">This browser does not support PDFs. Please download the PDF to view it: <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"previewUrl"</span>&gt;</span>Download PDF<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式四-通过标签嵌入内容"><a href="#方式四-通过标签嵌入内容" class="headerlink" title="方式四: 通过标签嵌入内容"></a>方式四: 通过标签嵌入内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">:src</span>=<span class="string">"previewUrl"</span> <span class="attr">type</span>=<span class="string">"application/pdf"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">此标签h5特性中包含四个属性：高、宽、类型、预览文件src！</span><br><span class="line">与<span class="tag">&lt; <span class="attr">iframe</span> &gt;</span> <span class="tag">&lt; / <span class="attr">iframe</span> &gt;</span> 不同，这个标签是自闭合的的，也就是说如果浏览器不支持PDF的嵌入，那么这个标签的内容什么都看不到！</span><br></pre></td></tr></table></figure><h3 id="方式五-标签和iframe使用差别较小"><a href="#方式五-标签和iframe使用差别较小" class="headerlink" title="方式五: 标签和iframe使用差别较小"></a>方式五: 标签和iframe使用差别较小</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">:src</span>=<span class="string">"previewUrl"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">This browser does not support PDFs. Please download the PDF to view it: <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"previewUrl"</span>&gt;</span>Download PDF<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除方式二以外其他都是直接通过标签将内容引入页面实现预览</p><h3 id="方式六-PDFObject"><a href="#方式六-PDFObject" class="headerlink" title="方式六: PDFObject"></a>方式六: PDFObject</h3><p>PDFObject实际上也是通过标签实现的直接上代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Show PDF<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'pdfobject.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-id">#pdf_viewer</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pdf_viewer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(PDFObject.supportsPDFs)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// PDF嵌入到网页</span></span></span><br><span class="line"><span class="javascript">        PDFObject.embed(<span class="string">"index.pdf"</span>, <span class="string">"#pdf_viewer"</span> );</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        location.href = <span class="string">"/canvas"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 还可以通过以下代码进行判断是否支持PDFObject预览</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(PDFObject.supportsPDFs)&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="string">"Yay, this browser supports inline PDFs."</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="string">"Boo, inline PDFs are not supported by this browser"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="方式七-PDF-js-简单粗暴"><a href="#方式七-PDF-js-简单粗暴" class="headerlink" title="方式七: PDF.js (简单粗暴)"></a>方式七: PDF.js (<a href="../../../../2018/05/17/预览PDF文件/">简单粗暴</a>)</h3><p>PDF.js可以实现在html下直接浏览pdf文档，是一款开源的pdf文档读取解析插件，非常强大，能将PDF文件渲染成Canvas。PDF.js主要包含两个库文件，一个pdf.js和一个pdf.worker.js，一个负责API解析，一个负责核心解析。</p><h2 id="2、word、xls、ppt文件在线预览功能"><a href="#2、word、xls、ppt文件在线预览功能" class="headerlink" title="2、word、xls、ppt文件在线预览功能"></a>2、word、xls、ppt文件在线预览功能</h2><p>word、ppt、xls文件实现在线预览的方式比较简单可以直接通过调用微软的在线预览功能实现 (预览前提：资源必须是公共可访问的)<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">'https://view.officeapps.live.com/op/view.aspx?src=http://storage.xuetangx.com/public_assets/xuetangx/PDF/1.xls'</span> <span class="attr">width</span>=<span class="string">'100%'</span> <span class="attr">height</span>=<span class="string">'100%'</span> <span class="attr">frameborder</span>=<span class="string">'1'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">/*src就是要实现预览的文件地址*/</span><br><span class="line">/*具体文档看这微软接口文档*/</span><br><span class="line">/*补充：google的文档在线预览实现同微软（资源必须是公共可访问的）*/</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">:src</span>=<span class="string">"'https://docs.google.com/viewer?url="</span><span class="attr">fileurl</span>"&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3、word文件"><a href="#3、word文件" class="headerlink" title="3、word文件"></a>3、word文件</h2><p>XDOC可以实现预览以DataURI表示的DOC文档，此外XDOC还可以实现文本、带参数文本、html文本、json文本、公文等在线预览，具体实现方法请看官方文档下面这种方式可以实现快速预览word但是对文件使用的编辑器可能会有一些限制<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.xdocin.com/xdoc?_func=to&amp;amp;_format=html&amp;amp;_cache=1&amp;amp;_xdoc=http://www.xdocin.com/demo/demo.docx"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span>XDOC<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4、excel文件"><a href="#4、excel文件" class="headerlink" title="4、excel文件"></a>4、excel文件</h2><p>目前excel文件已经有了类似pdf.js那样的解析sheet.js</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、免费纯前端方式实现在线预览word、excel、ppt最优选择微软在线预览（不可编辑）<br>2、利用后端将文件转为图片，前端以图片形式预览（可行方案）<br>3、购买在线预览服务例如百度DOC文档服务、永中、I DOC VIEW等</p><p><a href="https://juejin.im/post/5a7badf26fb9a063353198a1" target="_blank" rel="noopener">转载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、前端实现pdf文件在线预览功能&quot;&gt;&lt;a href=&quot;#1、前端实现pdf文件在线预览功能&quot; class=&quot;headerlink&quot; title=&quot;1、前端实现pdf文件在线预览功能&quot;&gt;&lt;/a&gt;1、前端实现pdf文件在线预览功能&lt;/h2&gt;&lt;h3 id=&quot;方式一-通
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信JSSDK遇到的那些坑</title>
    <link href="www.lookpeakfans.xyz/2018/04/19/wx_sdk/"/>
    <id>www.lookpeakfans.xyz/2018/04/19/wx_sdk/</id>
    <published>2018-04-19T09:53:52.000Z</published>
    <updated>2018-04-19T09:53:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个前端开发者，相信很多同道中人在微信公众号的开发中被坑的很惨，我也分享开发过程中的一点点经验给大家，可以减少很多弯路。由于项目需要，前端开发使用的是angular4.0技术，微信开发工具v1.02。前端开发公众号最坑的就是微信JSSDK的使用，前面坑路漫漫，我还得一步一步趟过去。</p><h2 id="JSSDK使用报错"><a href="#JSSDK使用报错" class="headerlink" title="JSSDK使用报错"></a>JSSDK使用报错</h2><h3 id="1-config-invalid-signature一直报这个错误"><a href="#1-config-invalid-signature一直报这个错误" class="headerlink" title="1. config:invalid signature一直报这个错误"></a>1. config:invalid signature一直报这个错误</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>建议：首先查看微信官方网站给出的解决方案.</code><a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html" target="_blank" rel="noopener">链接</a> <a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wxf17b04f12b73b60c&amp;secret=345d810799934a7736f60f95ddbbf84b" target="_blank" rel="noopener">获取access_token</a><br>&nbsp;&nbsp;&nbsp;&nbsp;建议按如下顺序查找错误：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.确认签名算法正确，可用 <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign" target="_blank" rel="noopener">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a> 页面工具进行校验。也就是你自己后台生成签名要和微信校验算法生成的签名一致才可以（可能大小写不同）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.确认config中nonceStr（js中驼峰标准大写S）, timestamp与用以签名中的对应noncestr, timestamp一致。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.确认url是页面完整的url(请在当前页面alert(location.href.split(‘#’)[0])确认)，包括’http(s)://‘部分，以及’？’后面的GET参数部分,但不包括’#’hash后面的部分。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.确保一定缓存access_token和jsapi_ticket。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.出现问题的原因是参与签名的URL地址不正确，需要动态获取当前页面完整的URL地址（包括?后面的参数，但不能包含#号），如若URL地址为：<code>http://www.xxx.xxx/payment/wxpay/jspay?oid=xxxx&amp;attr=xxxx#wechat</code>，那么完整的URL地址应该是截取#号之前的部份。为什么会出现#号呢？因为你的URL在被分享到朋友圈等微信系统自动会添加一些参数。<br>&nbsp;&nbsp;&nbsp;&nbsp;PS：这里有一个大坑，就是Android和iOS对于当前页面的URL有不同的理解，iOS微信JSSDK授权易出错，但是筛选页面后又OK了，Android每次授权是OK的，具体介绍<a href="https://gitissue.com/issues/5ab609afefbdd46ca4725b98" target="_blank" rel="noopener">看这里</a>。原因就是因为iOS和Android对URL的识别机制不同：Android每次进行新页面时当前URL也是最新的，而iOS每次进去新页面时实际URL是第一次进入应用的URL，刷新之后当前页面URL就是最新URL。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">解决办法： 在home页判断当前平台是否为iOS，若为iOS，此时通过wx.config()授权，获取直接通过window.location.href链接跳转来改变当前页面URL</span><br></pre></td></tr></table></figure></p><h3 id="2-permission-denied权限错误"><a href="#2-permission-denied权限错误" class="headerlink" title="2. permission denied权限错误"></a>2. permission denied权限错误</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先查看微信给出的错误说明：该公众号没有权限使用这个JSAPI（部分接口需要认证之后才能使)。<br>&nbsp;&nbsp;&nbsp;&nbsp;说明：只要通过了公众号认证，都不会有问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;检查对象：如果出现这个说明程序上基本上不会有问题 微信后台已经返回了数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;第一、要检查 你的config 文件中相应的 jsApiList数组中是否包含了该接口。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>,</span><br><span class="line">    appId: <span class="string">''</span>,</span><br><span class="line">timestamp:<span class="string">''</span>,</span><br><span class="line">nonceStr:<span class="string">''</span>,</span><br><span class="line">signature:<span class="string">''</span>,</span><br><span class="line">jsApiList: [</span><br><span class="line">    <span class="string">'checkJsApi'</span>,</span><br><span class="line">    <span class="string">'onMenuShareTimeline'</span>,</span><br><span class="line">    <span class="string">'hideOptionMenu'</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个前端开发者，相信很多同道中人在微信公众号的开发中被坑的很惨，我也分享开发过程中的一点点经验给大家，可以减少很多弯路。由于项目需要，前端开发使用的是angular4.0技术，微信开发工具v1.02。前端开发公众号最坑的就是微信JSSDK的使用，前面坑路漫漫，我还得一步
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Canvas实现图片压缩上传</title>
    <link href="www.lookpeakfans.xyz/2018/04/09/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    <id>www.lookpeakfans.xyz/2018/04/09/图片压缩/</id>
    <published>2018-04-09T09:42:58.000Z</published>
    <updated>2018-04-09T09:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>接到产品需求，问能不能将前端上传的图片压缩？像移动端上传图片，一般都是超清、高清图片，大小也有10M，甚至一张图片大小有15M左右，这样大的图片上传到腾讯云或者阿里云（没使用服务器上传图片）一方面上传速度慢，影响体验，另一方面体积太大占空间，图片压缩避免了，网上搜到了很多这方面介绍的<a href="https://www.cnblogs.com/stoneniqiu/p/5957356.html" target="_blank" rel="noopener">网址</a>，大多数都是用canvas来实现（不说了，马上开干）！。</p><h2 id="实现过程-10M-gt-200k左右"><a href="#实现过程-10M-gt-200k左右" class="headerlink" title="实现过程 (10M =&gt; 200k左右)"></a>实现过程 (10M =&gt; 200k左右)</h2><h3 id="1-图片裁剪"><a href="#1-图片裁剪" class="headerlink" title="1. 图片裁剪"></a>1. 图片裁剪</h3><p>大体的思路是将图片抽样显示在canvas上，然后用通过<code>canvas.toDataURL</code>方法得到base64字符串来实现压缩。上代码！！！<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> file: &#123;&#125; = e.target.files[<span class="number">0</span>]; <span class="comment">// 通过input元素触发的change事件</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader(),</span><br><span class="line">img = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="comment">// 缩放图片需要的canvas</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">const</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">reader.readAsDataURL(file);</span><br><span class="line"><span class="comment">// base64地址图片加载完毕后</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 图片原始尺寸</span></span><br><span class="line">  <span class="keyword">const</span> originWidth = <span class="keyword">this</span>[<span class="string">'width'</span>];</span><br><span class="line">  <span class="keyword">const</span> originHeight = <span class="keyword">this</span>[<span class="string">'height'</span>];</span><br><span class="line">  <span class="comment">// 最大尺寸限制</span></span><br><span class="line">  <span class="keyword">const</span> maxWidth = <span class="number">750</span>, maxHeight = <span class="number">400</span>;</span><br><span class="line">  <span class="comment">// 目标尺寸</span></span><br><span class="line">  <span class="keyword">let</span> targetWidth = originWidth, targetHeight = originHeight;</span><br><span class="line">  <span class="comment">// 图片尺寸超过750x400的限制</span></span><br><span class="line">  <span class="keyword">if</span> (originWidth &gt; maxWidth || originHeight &gt; maxHeight) &#123;</span><br><span class="line">    <span class="keyword">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123;</span><br><span class="line">      <span class="comment">// 更宽，按照宽度限定尺寸</span></span><br><span class="line">      targetWidth = maxWidth;</span><br><span class="line">      targetHeight = <span class="built_in">Math</span>.round(maxWidth * (originHeight / originWidth));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      targetHeight = maxHeight;</span><br><span class="line">      targetWidth = <span class="built_in">Math</span>.round(maxHeight * (originWidth / originHeight));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// canvas对图片进行缩放</span></span><br><span class="line">  canvas.width = targetWidth;</span><br><span class="line">  canvas.height = targetHeight;</span><br><span class="line">  <span class="comment">// 清除画布</span></span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">  <span class="comment">// 图片压缩</span></span><br><span class="line">  context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">  <span class="comment">// canvas转为blob并上传</span></span><br><span class="line">  <span class="comment">// * 很多PC、手机浏览器不支持toBlob方法，如Safari*</span></span><br><span class="line">  <span class="comment">// 不推荐使用toBlob方法</span></span><br><span class="line">  <span class="comment">// canvas.toBlob(function($Blob) &#123;</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="keyword">const</span> dataUrl = canvas.toDataURL(<span class="string">'image/jpeg'</span>);</span><br><span class="line">  updateImgForBase64(dataUrl);</span><br><span class="line">&#125;</span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    img.src = e.target[<span class="string">'result'</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="2-上传到腾讯云"><a href="#2-上传到腾讯云" class="headerlink" title="2. 上传到腾讯云"></a>2. 上传到腾讯云</h3><p>项目中图片是保存在腾讯云中，这里就需要用到<a href="https://cloud.tencent.com/document/product/436/11459" target="_blank" rel="noopener">腾讯JavaScript SDK</a>，按照SDK文档去新建存储桶获取Bucket、Region，直接上代码：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updateImgForBase64(img: string, <span class="attr">type</span>: string = <span class="string">'jpeg'</span>): <span class="built_in">Promise</span>&lt;any&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> storeAs = <span class="string">`avatar/<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>-<span class="subst">$&#123;<span class="keyword">this</span>.guid()&#125;</span>.<span class="subst">$&#123;type&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> dataURLtoFile: <span class="built_in">Function</span> = <span class="function">(<span class="params">dataurl, filename</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> bstr = atob(arr[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">let</span> n = bstr.length;</span><br><span class="line">      <span class="keyword">const</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">      <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], filename, &#123;<span class="attr">type</span>: mime&#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> file = dataURLtoFile(img, type);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// function getBlobBydataURI(dataURI, type) &#123;</span></span><br><span class="line">    <span class="comment">//   var binary = atob(dataURI.split(',')[1]);</span></span><br><span class="line">    <span class="comment">//   var array = [];</span></span><br><span class="line">    <span class="comment">//   for (var i = 0; i &lt; binary.length; i++) &#123;</span></span><br><span class="line">    <span class="comment">//     array.push(binary.charCodeAt(i));</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">//   return new Blob([new Uint8Array(array)], &#123;type: type&#125;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// /**</span></span><br><span class="line">    <span class="comment">//  * 上传  formData.append("files", $Blob, storeAs);对iOS系统不支持</span></span><br><span class="line">    <span class="comment">//  */</span></span><br><span class="line">    <span class="comment">//   //base64 转 blob</span></span><br><span class="line">    <span class="comment">// let $Blob = getBlobBydataURI(img, 'image/jpeg');</span></span><br><span class="line">    <span class="comment">// let formData = new FormData();</span></span><br><span class="line">    <span class="comment">// let storeAs = `documents/$&#123;new Date().getTime()&#125;-$&#123;this.guid()&#125;.$&#123;type&#125;`;</span></span><br><span class="line">    <span class="comment">// formData.append("files", $Blob, storeAs);</span></span><br><span class="line">    <span class="comment">//组建XMLHttpRequest 上传文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.cos.sliceUploadFile(&#123;</span><br><span class="line">        Bucket: <span class="string">'your bucket'</span>,</span><br><span class="line">        Region: <span class="string">'your region'</span>,</span><br><span class="line">        Key: storeAs,</span><br><span class="line">        Body: file</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          reject(<span class="built_in">JSON</span>.stringify(err));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(url);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接到产品需求，问能不能将前端上传的图片压缩？像移动端上传图片，一般都是超清、高清图片，大小也有10M，甚至一张图片大小有15M左右，这样大的图片上传到腾讯云或者阿里云（没使用服务器上传图片）一方面上传速度慢，影响体验，另一方面体积太大占空间，图片压缩避免了，网上搜到了很多这
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信公众号本地调试小技巧</title>
    <link href="www.lookpeakfans.xyz/2018/04/09/ngrok/"/>
    <id>www.lookpeakfans.xyz/2018/04/09/ngrok/</id>
    <published>2018-04-09T09:09:17.000Z</published>
    <updated>2018-04-09T09:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>本地调试是公众号开发过程中不可缺少的步骤，我们不可能每次开发都上传到服务器再用微信去查看本地效果，这样一方面效率低，另一方面存在一定的风险性。那么有没有什么办法能够让开发者本地调试代码呢，答案是有的，网上搜出了很多方法，比如ngrok、花生壳、natapp.cn等工具，下面介绍的是<a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a>，其他的嫌麻烦。</p><h2 id="ngrok使用"><a href="#ngrok使用" class="headerlink" title="ngrok使用"></a>ngrok使用</h2><h3 id="1-为什么要用ngrok"><a href="#1-为什么要用ngrok" class="headerlink" title="1. 为什么要用ngrok"></a>1. 为什么要用ngrok</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在微信开发的时候需要填写与微信服务器相连接的url才能授权，这个url必须是外网域名，也就是说我们需要在这个外网域名对应的ip服务器上做开发，而没办法本地开发调试所以用ngrok获得一个外网域名 这个外网域名实际访问的是本地主机这样把此外网域名填入到微信需要的外网url里就可以在本地开发调试了。</p><h3 id="2-使用ngrok"><a href="#2-使用ngrok" class="headerlink" title="2.使用ngrok"></a>2.使用ngrok</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先到官网下载<a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a>，然后注册一个ngrok帐号拿到token，这个token自定义域名的时候使用，<a href="https://dashboard.ngrok.com/get-started" target="_blank" rel="noopener">具体看这里</a>。我本人使用的MAC，需到ngrok目录下执行命令<br><img src="/images/ngrok1.png" alt=""><br>这时候ngrok已经生成了一个外网域名<code>http://4f75fc79.ngrok.io</code>访问本机<code>localhost:80</code><br><img src="/images/ngrok2.png" alt=""><br>浏览器里直接访问<code>http://4f75fc79.ngrok.io</code>就可以访问本地。<br>现在外网有了，就可以开始授权了。为了避免和线上冲突，我注册了一个微信公众号开发者测试号，已经能够调用微信开放的大多数JS接口了。创建公众号测试帐号方法可以自行百度.<br><img src="/images/ngrok3.jpg" alt=""><br>此处有一个坑，网上很多都说这里的token是随便写的，的确，但是作为一个前端开发者，在没有后端资源情况下随便填写的token总是报token无效错误，这是因为保存修改时微信会向填写的URL发送一个验证请求，验证token是否有效，但是我们不知道token是多少，现在如何做呢？我有node.js爸爸，还怕什么呢，我们可以本地起一个服务来监听微信请求的URL，上面说到微信此时会发起一个get请求到<br><code>http://4f75fc79.ngrok.io</code>那我就本地写一个服务来监听，只要服务里的token和修改的一致不就可以匹配了吗？说干就干，直接上代码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PORT=<span class="number">80</span>;                 <span class="comment">//监听80端口号</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);  </span><br><span class="line"><span class="keyword">var</span> qs=<span class="built_in">require</span>(<span class="string">'qs'</span>);</span><br><span class="line"><span class="keyword">var</span> TOKEN=<span class="string">'token'</span>;           <span class="comment">//必须与测试号所填写的Token相同</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span>(<span class="params">params,token</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key=[token,params.timestamp,params.nonce].sort().join(<span class="string">''</span>); </span><br><span class="line">     <span class="comment">//将token （自己设置的） 、timestamp（时间戳）、nonce（随机数）三个参数进行字典排序</span></span><br><span class="line">    <span class="keyword">var</span> sha1=<span class="built_in">require</span>(<span class="string">'crypto'</span>).createHash(<span class="string">'sha1'</span>);</span><br><span class="line">     <span class="comment">//将上面三个字符串拼接成一个字符串再进行sha1加密</span></span><br><span class="line">    sha1.update(key);</span><br><span class="line">    <span class="keyword">return</span> sha1.digest(<span class="string">'hex'</span>) ==params.signature;</span><br><span class="line">     <span class="comment">//将加密后的字符串与signature进行对比，若成功，返回echostr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server=http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request,response</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> query=<span class="built_in">require</span>(<span class="string">'url'</span>).parse(request.url).query;</span><br><span class="line">    <span class="keyword">var</span> params=qs.parse(query);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"token :"</span>,TOKEN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!checkSignature(params,TOKEN))&#123;</span><br><span class="line">        <span class="comment">//如果签名不对，结束请求并返回</span></span><br><span class="line">        response.end(<span class="string">'signature fail'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request.method == <span class="string">"GET"</span>) &#123;</span><br><span class="line">        <span class="comment">//如果请求是GET，返回echostr用于通过服务器有效校验</span></span><br><span class="line">        response.end(params.echostr);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//否则是微信给开发者服务器的POST请求</span></span><br><span class="line">        <span class="keyword">var</span> postdata=<span class="string">''</span>;</span><br><span class="line">        request.addListener(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">postchunk</span>)</span>&#123;</span><br><span class="line">            postdata+=postchunk;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//获取到了POST数据</span></span><br><span class="line">        request.addListener(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(postdata);</span><br><span class="line">            response.end(<span class="string">'success '</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(PORT, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running at port:'</span>+PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>微信发起的请求直接到我们本地，那还不是我想怎么玩就怎么玩，嘿嘿嘿！具体操作看<a href="https://blog.csdn.net/yezhenxu1992/article/details/51691649" target="_blank" rel="noopener">这里</a><br>修改接口配置成功后就可以调用测试号里面的所有js接口了，实现本地调试微信公众号不再是奢望！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本地调试是公众号开发过程中不可缺少的步骤，我们不可能每次开发都上传到服务器再用微信去查看本地效果，这样一方面效率低，另一方面存在一定的风险性。那么有没有什么办法能够让开发者本地调试代码呢，答案是有的，网上搜出了很多方法，比如ngrok、花生壳、natapp.cn等工具，下面
      
    
    </summary>
    
    
  </entry>
  
</feed>
