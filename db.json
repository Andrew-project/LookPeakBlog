{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/images/ngrok1.png","path":"images/ngrok1.png","modified":0,"renderable":0},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/images/ngrok2.png","path":"images/ngrok2.png","modified":0,"renderable":0},{"_id":"source/images/home.jpg","path":"images/home.jpg","modified":0,"renderable":0},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"source/images/ngrok3.jpg","path":"images/ngrok3.jpg","modified":0,"renderable":0},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.jpeg","path":"images/donate/alipayimg.jpeg","modified":0,"renderable":1},{"_id":"source/images/pdf.jpg","path":"images/pdf.jpg","modified":0,"renderable":0},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"source/images/pdf0.jpg","path":"images/pdf0.jpg","modified":0,"renderable":0},{"_id":"source/images/pdf1.jpg","path":"images/pdf1.jpg","modified":0,"renderable":0},{"_id":"source/images/pdf3.jpg","path":"images/pdf3.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1532976952000},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1532976952000},{"_id":"themes/pure/_config.yml","hash":"edd2659053294487fbadb0c1da4cc1c11306a873","modified":1536820995000},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1532976952000},{"_id":"themes/pure/README.cn.md","hash":"a580852da41e27b6458b3996f9b3d4641a688449","modified":1532976952000},{"_id":"themes/pure/_config.yml.example","hash":"d522753943b5a774d7143eee783834453bb593d7","modified":1532976952000},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1532976952000},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1532976952000},{"_id":"source/_posts/CSS实现文字滚动，类似公告展示.md","hash":"62a0c06bb0c1f9c3207db902ba3d5c41ec033278","modified":1536739806000},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1532976952000},{"_id":"source/_posts/ngrok.md","hash":"9e2cb8d8e21e8c9dbfaa6bc7f8c69181846d9013","modified":1536739895000},{"_id":"source/_posts/wx_sdk.md","hash":"c392aa4b05a23455e18dfd39b7a44a59fe29ec9e","modified":1536739920000},{"_id":"source/_posts/与小程序间的相爱相杀.md","hash":"78e7aa58b0d00e0a9604c75062d33cb9b54e9f00","modified":1536740870000},{"_id":"source/_posts/前端预览文件.md","hash":"80ff7fd01407275db44c4c5943f1755bc17f4619","modified":1536741441000},{"_id":"source/_posts/图片压缩.md","hash":"3e2d7a22c192d6162869b503906ae79f671bd823","modified":1536740043000},{"_id":"source/_posts/预览PDF文件.md","hash":"aceb1b1de16acf943e56c5cd52488e589b93e979","modified":1536745602000},{"_id":"source/about/index.md","hash":"8fdf8003fd9cf398774eca918fba7c04dcae27fa","modified":1536821046000},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1532976952000},{"_id":"source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1532976952000},{"_id":"source/images/avatar.jpeg","hash":"79c349c84e1c491712804f07214c06fc045d14a3","modified":1523260980000},{"_id":"source/images/ngrok1.png","hash":"afca08b310edc1ac853bc9c8a04736e0e3fc6fbc","modified":1523101024000},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1532976952000},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1532976952000},{"_id":"source/tags/index.md","hash":"eb20aa81b7167a31e6db6859f22b3546f3e65d6c","modified":1533810102000},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1532976952000},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1532976952000},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1532976952000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1532976952000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1532976952000},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1532976952000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1532976952000},{"_id":"themes/pure/layout/categories.ejs","hash":"2084974ba68f799216a8b216752f7fc87c693cc0","modified":1532976952000},{"_id":"themes/pure/layout/category.ejs","hash":"68632e8ac45088a929ca82b6cca8ba60323d6aac","modified":1532976952000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1532976952000},{"_id":"themes/pure/layout/layout.ejs","hash":"0438b1e88fcf2c2da67283ef84bdf83264448f8f","modified":1533810404000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1532976952000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1532976952000},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1532976952000},{"_id":"themes/pure/layout/tag.ejs","hash":"6e4e6660cf58beb3e5e2e52b59c51393e4796c36","modified":1532976952000},{"_id":"themes/pure/layout/tags.ejs","hash":"4c0b797a45cf238be367932927edc88599aa3255","modified":1532976952000},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1532976952000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1532976952000},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1532976952000},{"_id":"source/images/ngrok2.png","hash":"9684c2fdeda517e4e6af209bb545adb8dcf9cbf9","modified":1523100902000},{"_id":"source/images/home.jpg","hash":"cf792ead5fbd7a5f308b8cb94df77451b7b5d9cf","modified":1523261684000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1532976952000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1532976952000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1532976952000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1532976952000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1532976952000},{"_id":"themes/pure/_source/404/index.md","hash":"bd8d432cef40ea915d45e4df1eda43100851efeb","modified":1533882857000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1532976952000},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1532976952000},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1532976952000},{"_id":"themes/pure/_source/about/index.md","hash":"8adde614cfdefeb3ca2708e643812261f0633f2a","modified":1533808784000},{"_id":"themes/pure/_source/categories/index.md","hash":"a9f2d6661e1ed09556ebf1136ac5c82b3f1022d6","modified":1533809566000},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1532976952000},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1532976952000},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1532976952000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"a2e302468c45f88375ced872acc5776646c17c4b","modified":1533883270000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"b8373f4250170510640d7aa0ee82b9d7b9328672","modified":1532976952000},{"_id":"themes/pure/layout/_common/plugin.ejs","hash":"c5decee89b55b9d40bc6a000e0a34b0a016ea08b","modified":1532976952000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1532976952000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"5963fdc39a925c6961c7c360776f09be7ba81c43","modified":1534229736000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"420dd18d8ea730065d20fee2bf7a7a9879a847cb","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1532976952000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1532976952000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1532976952000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1532976952000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"11b36cdc807ec20470828385b4a590ffbf7ae1d9","modified":1532976952000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"ce1492c39a9d73c6dbcc3993e705a2526bbab79b","modified":1532976952000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1532976952000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1532976952000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1532976952000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1532976952000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"2cc8fa015979b0ac2270faac0f0249577517fd63","modified":1532976952000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1532976952000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1532976952000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1532976952000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1532976952000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1532976952000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1532976952000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1532976952000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1532976952000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1532976952000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1532976952000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1532976952000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1532976952000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1532976952000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1532976952000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1532976952000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1532976952000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1532976952000},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1532976952000},{"_id":"themes/pure/source/js/application.min.js","hash":"d18a1f4e9cdae00000a2224632db261d62f1db0d","modified":1532976952000},{"_id":"themes/pure/source/js/application.js","hash":"f36f3451604f8a808e784faf49fc201fac43a95a","modified":1532976952000},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1532976952000},{"_id":"source/images/ngrok3.jpg","hash":"32e927e5ff1b57b63c05e6776eb5356080bfd712","modified":1523101470000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1532976952000},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1532976952000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"807f46a16e31be965b36e81923b4882f668a2a99","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"6692e9a906a5066d41dca9c52d6a3380383aac0c","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1532976952000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1532976952000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1532976952000},{"_id":"themes/pure/layout/_script/_analytics/script.ejs","hash":"c5aa37346d973437d0a693f8dd345a0b87edfe6f","modified":1532976952000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1532976952000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"b30ced7d02e63c64227139aa4b99286400d7bcea","modified":1532976952000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"dee9c2adc0df37c7e1edb617ba92983eee3f3c8e","modified":1532976952000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"c951b2fac4e143c0a2fb4fd3369307f23cfe2687","modified":1532976952000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"09e66c8bfd1cc0507a0da619f56101423b9e653a","modified":1532976952000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"43aa1dc6a2799d44c7ca87dddafb4d0f0c9754bb","modified":1532976952000},{"_id":"themes/pure/layout/_script/_comment/script.ejs","hash":"fd5f5ec44076e99792e1df8f0893f84ebb2cd0bb","modified":1532976952000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1532976952000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"92d897be24e8c520c5a3f8903c542892e2b30a9a","modified":1532976952000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1532976952000},{"_id":"themes/pure/source/css/style.min.css","hash":"bab3e261659c9e18b2b2a26743f9e0577cc0c1f6","modified":1532976952000},{"_id":"themes/pure/source/css/style.css","hash":"fb86e8eaadf07f92a2e462ba01213c727fa4ec87","modified":1532976952000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1532976952000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1532976952000},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"0f6ac674313304d6c4e1b3bd3e51bdceeb97b1d8","modified":1533804439000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1532976952000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1532976952000},{"_id":"themes/pure/source/images/donate/alipayimg.jpeg","hash":"6ae891e3a5af360f73b42011bcfb8bbffca90d8f","modified":1533804439000},{"_id":"source/images/pdf.jpg","hash":"d86852f8c83ae9e0e11d0ec157f2e60b66afe8a0","modified":1526545389000},{"_id":"themes/pure/source/images/avatar.jpg","hash":"1910f1282ef83d62112a36f3c8e73b9f3a6436de","modified":1533883843000},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1532976952000},{"_id":"public/baidusitemap.xml","hash":"a4dd4012178927b2f6c2f900b8acdab79d2954cf","modified":1552627590511},{"_id":"public/atom.xml","hash":"248e688b92390344c7bb4ca8703a4e5ee73b183a","modified":1552627590822},{"_id":"public/content.json","hash":"d0210468c399a5d4c9cb77127c3cde4a6c78e70e","modified":1552627593365},{"_id":"public/sitemap.xml","hash":"3c05ef0b9bcda59fc41ca5b4ef15feb5de713e39","modified":1552627595002},{"_id":"public/books/index.html","hash":"332b921f83be91f479e1f38c0894b27797d6728b","modified":1552627595360},{"_id":"public/categories/index.html","hash":"713893700b87f0d44f87c56ae143591bd261d396","modified":1552627595374},{"_id":"public/repository/index.html","hash":"b385c6dea5a2ca565ac385c5cdd84c04a43317ea","modified":1552627595715},{"_id":"public/links/index.html","hash":"767f935dbd80d2d6e6082dec316f6adc32ca392c","modified":1552627596075},{"_id":"public/tags/index.html","hash":"7d55762ff6649efb7a5d2dca4e8054d67992c21e","modified":1552627596081},{"_id":"public/about/index.html","hash":"14b7217938a03e4b3960ac0a598ef90dc892bab5","modified":1552627596081},{"_id":"public/2018/08/14/预览PDF文件/index.html","hash":"9ca64df374340a3465d393f839bfc4bf58d0af5d","modified":1536739695019},{"_id":"public/archives/index.html","hash":"e2bd0b35d91d6e2edbe249fd698b543efa3de345","modified":1552627596077},{"_id":"public/archives/2018/index.html","hash":"c3067aa37aa61158d37b9008e2fca9dad59ef340","modified":1552627596079},{"_id":"public/archives/2018/08/index.html","hash":"4e665534ae1f8b02fc310e72a5c035ea83cd7b44","modified":1536739695056},{"_id":"public/categories/前端/index.html","hash":"35c1cfea4f5597291e56fbcfd6aa6e93a0547221","modified":1552627596080},{"_id":"public/categories/工具/index.html","hash":"128b6002858b4d46eed9b0100f52c36663e304b7","modified":1552627596080},{"_id":"public/tags/CSS/index.html","hash":"dab5b443e100f010a6fb7705c4af22a5843bbfc2","modified":1552627596080},{"_id":"public/tags/微信公众号/index.html","hash":"fead07a5fbe469ee469eb9e355e44e12f614fdc0","modified":1552627596080},{"_id":"public/tags/小程序/index.html","hash":"71dfee1b88a5292a30ae14c2639c57d113a54286","modified":1552627596081},{"_id":"public/tags/JS/index.html","hash":"fd4dabba6f1de7d051c8cb974fb79f3c87423207","modified":1552627596081},{"_id":"public/2018/09/12/css/index.html","hash":"6d70f94faa49df9152a7b6c63e7e330fcc9590db","modified":1536739695085},{"_id":"public/2018/08/14/前端预览文件/index.html","hash":"557d383a3bf3532b512a55773a8cd14079ce1c18","modified":1536739695086},{"_id":"public/2018/08/14/图片压缩/index.html","hash":"44f1336840d6b2d8c4c938217ee1895155bbfa9d","modified":1536739695086},{"_id":"public/2018/08/14/与小程序间的相爱相杀/index.html","hash":"09bbf0899f1091d9a8bd741e7862014c61bc27b4","modified":1536739695086},{"_id":"public/2018/08/14/wx_sdk/index.html","hash":"43a3afade2ac8082f1a03bdd0391827607ad860e","modified":1536739695086},{"_id":"public/2018/08/14/ngrok/index.html","hash":"75ed74b8aa58e2c120a8faa4819cb80cf3443346","modified":1536739695086},{"_id":"public/index.html","hash":"cac28cc57dfab6dd6ee33488abca587fabaa3bf9","modified":1552627596084},{"_id":"public/archives/2018/09/index.html","hash":"26548a843c57bd829ced4991f69000897bd23e5a","modified":1552627596079},{"_id":"source/images/pdf1.jpg","hash":"e4950238ed48a42f59a04269a3a6555a2f249526","modified":1536744165000},{"_id":"source/images/pdf0.jpg","hash":"bb5e42c6a1ed200c9b3a3c57fa6bea311a06fa4d","modified":1536744173000},{"_id":"source/images/pdf3.jpg","hash":"8cb0683dc99a72e96e03e4ce962245346b38b2aa","modified":1536744861000},{"_id":"public/archives/2018/04/index.html","hash":"e2dc16bec0cc4c8489ca40b6860145642bc0a246","modified":1552627596079},{"_id":"public/archives/2018/06/index.html","hash":"8718a3c454eb7db34d31fd816897ec05037339fe","modified":1552627596079},{"_id":"public/archives/2018/07/index.html","hash":"f2ede066150ec1826e007cb9639e4b3c3259f372","modified":1552627596079},{"_id":"public/2018/09/12/wechat-applet/index.html","hash":"c2c3614dbfc0ea170b76a5824530194ae5104f20","modified":1552627596082},{"_id":"public/2018/07/22/preview-pdf/index.html","hash":"cffaf1baa81f3fde02f50f0f9fd9f0cb1ab5be11","modified":1552627596082},{"_id":"public/2018/07/20/compress-image/index.html","hash":"7e9e5ea1a43e40e9b716c0d890078f7cbcc3a5c1","modified":1552627596082},{"_id":"public/2018/07/14/preview-file/index.html","hash":"35cbaf755e7c15ce17734c77c7728b79d515b0b5","modified":1552627596082},{"_id":"public/2018/06/20/wx-sdk/index.html","hash":"2a80830b41f2e1e11af94c6ce553625b1723f9b8","modified":1552627596083},{"_id":"public/2018/06/12/ngrok/index.html","hash":"a41d881245d0805c7cc23a5d48ae7d45a3916f7c","modified":1552627596083},{"_id":"public/2018/04/25/css-roll/index.html","hash":"0e1fa6ae58e316fcbc1ac48f38f38527a4b68d26","modified":1552627596083},{"_id":"public/images/pdf0.jpg","hash":"bb5e42c6a1ed200c9b3a3c57fa6bea311a06fa4d","modified":1536745658119},{"_id":"public/images/pdf1.jpg","hash":"e4950238ed48a42f59a04269a3a6555a2f249526","modified":1536745658120},{"_id":"public/images/pdf3.jpg","hash":"8cb0683dc99a72e96e03e4ce962245346b38b2aa","modified":1536745658126},{"_id":"source/_posts/将博客搬至CSDN.md","hash":"fcbdf56aec1879bdad3d83b99bf36f60981bad37","modified":1552627467998},{"_id":"public/archives/2019/index.html","hash":"42ca64ef90868ebd9c4214891b7fe389c0011bc4","modified":1552627596089},{"_id":"public/archives/2019/03/index.html","hash":"1ec5894726f8ea5f2950799042dd234e50960791","modified":1552627596089},{"_id":"public/categories/文章/index.html","hash":"ff4b1ff474193e1767a38f0e5d025e2a3b9601ce","modified":1552627596090},{"_id":"public/tags/个人/index.html","hash":"9bd542ec716a0d48af617a8669a47963330372c8","modified":1552627596090},{"_id":"public/2019/03/15/csdn/index.html","hash":"4f2b5853e43501473f99891a4ac6c0b653ee981a","modified":1552627596091}],"Category":[{"name":"前端","_id":"cjlyv10e10004cbq3fcqfovt6"},{"name":"工具","_id":"cjlyv10ea000bcbq32lswprep"},{"name":"文章","_id":"cjt9mdbj9000169q3k29qjko1"}],"Data":[{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}},{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}],"Page":[{"title":"关于","description":null,"layout":"about","comments":0,"sidebar":"custom","_content":"致力于小程序、微信公众号与web前端开发。喜欢新事物，关注前端动态，对新的技术有追求；努力学会做一个\"懒人\"。\n\n```json\n{\n  name: 'lishaohua'\n  age: 24,\n  gender: '男',\n  profession: 'Web Developer',\n  experience: '3年',\n  address: '北京市朝阳区',\n  education: '本科',\n  github: 'https://github.com/Andrew-project',\n  blog: 'blog.lookpeakfans.xyz',\n  email: 'lsh294753@gmail.com',\n  description: '致力于小程序、微信公众号与web前端开发',\n\n  skills: [\n    ['Html', 'Javascript', 'CSS', 'ES6', 'Node', 'Typescript'],\n    ['Less','Sass'],\n    ['Angular', 'Ionic'],\n    ['小程序', '微信公众号'],\n    ['Vue'],\n    ['Git'],\n    ['NG-ZORRO', 'Bootstrap']\n  ],\n\n  devTools: [\n    ['Visual Studio Code', 'Webstorm'],\n    ['Chrome DevTools'],\n  ]  \n}\n\n```","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: \nlayout: about\ncomments: false\nsidebar: custom\n---\n致力于小程序、微信公众号与web前端开发。喜欢新事物，关注前端动态，对新的技术有追求；努力学会做一个\"懒人\"。\n\n```json\n{\n  name: 'lishaohua'\n  age: 24,\n  gender: '男',\n  profession: 'Web Developer',\n  experience: '3年',\n  address: '北京市朝阳区',\n  education: '本科',\n  github: 'https://github.com/Andrew-project',\n  blog: 'blog.lookpeakfans.xyz',\n  email: 'lsh294753@gmail.com',\n  description: '致力于小程序、微信公众号与web前端开发',\n\n  skills: [\n    ['Html', 'Javascript', 'CSS', 'ES6', 'Node', 'Typescript'],\n    ['Less','Sass'],\n    ['Angular', 'Ionic'],\n    ['小程序', '微信公众号'],\n    ['Vue'],\n    ['Git'],\n    ['NG-ZORRO', 'Bootstrap']\n  ],\n\n  devTools: [\n    ['Visual Studio Code', 'Webstorm'],\n    ['Chrome DevTools'],\n  ]  \n}\n\n```","date":"2018-09-13T06:44:06.000Z","updated":"2018-09-13T06:44:06.000Z","path":"about/index.html","_id":"cjlyv10dw0001cbq34rcakqys","content":"<!-- build time:Thu Sep 13 2018 14:44:27 GMT+0800 (CST) --><p>致力于小程序、微信公众号与web前端开发。喜欢新事物，关注前端动态，对新的技术有追求；努力学会做一个”懒人”。</p><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: 'lishaohua'</span><br><span class=\"line\">  age: 24,</span><br><span class=\"line\">  gender: '男',</span><br><span class=\"line\">  profession: 'Web Developer',</span><br><span class=\"line\">  experience: '3年',</span><br><span class=\"line\">  address: '北京市朝阳区',</span><br><span class=\"line\">  education: '本科',</span><br><span class=\"line\">  github: 'https://github.com/Andrew-project',</span><br><span class=\"line\">  blog: 'blog.lookpeakfans.xyz',</span><br><span class=\"line\">  email: 'lsh294753@gmail.com',</span><br><span class=\"line\">  description: '致力于小程序、微信公众号与web前端开发',</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    ['Html', 'Javascript', 'CSS', 'ES6', 'Node', 'Typescript'],</span><br><span class=\"line\">    ['Less','Sass'],</span><br><span class=\"line\">    ['Angular', 'Ionic'],</span><br><span class=\"line\">    ['小程序', '微信公众号'],</span><br><span class=\"line\">    ['Vue'],</span><br><span class=\"line\">    ['Git'],</span><br><span class=\"line\">    ['NG-ZORRO', 'Bootstrap']</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devTools: [</span><br><span class=\"line\">    ['Visual Studio Code', 'Webstorm'],</span><br><span class=\"line\">    ['Chrome DevTools'],</span><br><span class=\"line\">  ]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Thu Sep 13 2018 14:44:27 GMT+0800 (CST) --><p>致力于小程序、微信公众号与web前端开发。喜欢新事物，关注前端动态，对新的技术有追求；努力学会做一个”懒人”。</p><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: 'lishaohua'</span><br><span class=\"line\">  age: 24,</span><br><span class=\"line\">  gender: '男',</span><br><span class=\"line\">  profession: 'Web Developer',</span><br><span class=\"line\">  experience: '3年',</span><br><span class=\"line\">  address: '北京市朝阳区',</span><br><span class=\"line\">  education: '本科',</span><br><span class=\"line\">  github: 'https://github.com/Andrew-project',</span><br><span class=\"line\">  blog: 'blog.lookpeakfans.xyz',</span><br><span class=\"line\">  email: 'lsh294753@gmail.com',</span><br><span class=\"line\">  description: '致力于小程序、微信公众号与web前端开发',</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    ['Html', 'Javascript', 'CSS', 'ES6', 'Node', 'Typescript'],</span><br><span class=\"line\">    ['Less','Sass'],</span><br><span class=\"line\">    ['Angular', 'Ionic'],</span><br><span class=\"line\">    ['小程序', '微信公众号'],</span><br><span class=\"line\">    ['Vue'],</span><br><span class=\"line\">    ['Git'],</span><br><span class=\"line\">    ['NG-ZORRO', 'Bootstrap']</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devTools: [</span><br><span class=\"line\">    ['Visual Studio Code', 'Webstorm'],</span><br><span class=\"line\">    ['Chrome DevTools'],</span><br><span class=\"line\">  ]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2018-08-09T09:54:26.000Z","updated":"2018-07-30T18:55:52.000Z","path":"books/index.html","_id":"cjlyv10dz0003cbq3iaxnowfk","content":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->"},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2018-08-09T09:54:26.000Z","updated":"2018-07-30T18:55:52.000Z","path":"categories/index.html","_id":"cjlyv10e40007cbq30hhx09qf","content":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->"},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2018-08-09T09:54:26.000Z","updated":"2018-07-30T18:55:52.000Z","path":"repository/index.html","_id":"cjlyv10e70009cbq31o9cq5o3","content":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->"},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2018-08-09T09:54:26.000Z","updated":"2018-07-30T18:55:52.000Z","path":"links/index.html","_id":"cjlyv10eb000dcbq3g0hytemy","content":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->"},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---","date":"2018-08-09T10:21:42.000Z","updated":"2018-08-09T10:21:42.000Z","path":"tags/index.html","_id":"cjlyv10ee000gcbq3bfwhtcfq","content":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 16:05:12 GMT+0800 (CST) --><!-- rebuild by neat -->"}],"Post":[{"title":"CSS实现文字滚动，类型京东商城公告栏","shared":false,"date":"2018-04-24T16:00:00.000Z","_content":"实现文字滚动，第一时间想用swiper进行，但是需求功能较少，不需要引用外部swiper.js，直接用CSS的animate属性实现文字滚动，2秒滚动一次，实现如下:\n\n```html\n<div class=\"notice\">\n <ul>\n <li>第1条公告第1条公告第1条公告第1条公告第1条公告第1条公告</li>\n <li>第2条公告第2条公告第2条公告第2条公告第2条公告第2条公告</li>\n <li>第3条公告第3条公告第3条公告第3条公告第3条公告第3条公告</li>\n <li>第4条公告第4条公告第4条公告第4条公告第4条公告第4条公告</li>\n </ul>\n</div>\n\n```\n\n```css\ndiv,ul,li{margin: 0;padding: 0}/*先初始化一下默认样式*/\n.notice {\n width: 300px;/*单行显示，超出隐藏*/\n height: 35px;/*固定公告栏显示区域的高度*/\n padding: 0 30px;\n background-color: #b3effe;\n overflow: hidden;\n}\n.notice ul li {\n list-style: none;\n line-height: 35px;\n /*以下为了单行显示，超出隐藏*/\n display: block;\n white-space: nowrap;\n text-overflow: ellipsis;\n overflow: hidden;\n}\n```\n\n```js\nfunction noticeUp(obj,top,time) {\n $(obj).animate({\n marginTop: top\n }, time, function () {\n $(this).css({marginTop:\"0\"}).find(\":first\").appendTo(this);\n })\n}\n\n setInterval(\"noticeUp('.notice ul','-35px',500)\", 2000);\n```","source":"_posts/CSS实现文字滚动，类似公告展示.md","raw":"---\ntitle: 'CSS实现文字滚动，类型京东商城公告栏'\ntags:\n    - CSS\ncategories:\n    - 前端\npermalink: css-roll\nshared: false\ndate: 2018-04-25\n---\n实现文字滚动，第一时间想用swiper进行，但是需求功能较少，不需要引用外部swiper.js，直接用CSS的animate属性实现文字滚动，2秒滚动一次，实现如下:\n\n```html\n<div class=\"notice\">\n <ul>\n <li>第1条公告第1条公告第1条公告第1条公告第1条公告第1条公告</li>\n <li>第2条公告第2条公告第2条公告第2条公告第2条公告第2条公告</li>\n <li>第3条公告第3条公告第3条公告第3条公告第3条公告第3条公告</li>\n <li>第4条公告第4条公告第4条公告第4条公告第4条公告第4条公告</li>\n </ul>\n</div>\n\n```\n\n```css\ndiv,ul,li{margin: 0;padding: 0}/*先初始化一下默认样式*/\n.notice {\n width: 300px;/*单行显示，超出隐藏*/\n height: 35px;/*固定公告栏显示区域的高度*/\n padding: 0 30px;\n background-color: #b3effe;\n overflow: hidden;\n}\n.notice ul li {\n list-style: none;\n line-height: 35px;\n /*以下为了单行显示，超出隐藏*/\n display: block;\n white-space: nowrap;\n text-overflow: ellipsis;\n overflow: hidden;\n}\n```\n\n```js\nfunction noticeUp(obj,top,time) {\n $(obj).animate({\n marginTop: top\n }, time, function () {\n $(this).css({marginTop:\"0\"}).find(\":first\").appendTo(this);\n })\n}\n\n setInterval(\"noticeUp('.notice ul','-35px',500)\", 2000);\n```","slug":"css-roll","published":1,"updated":"2018-09-12T08:10:06.000Z","_id":"cjlyv10dr0000cbq37nt83ie0","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>实现文字滚动，第一时间想用swiper进行，但是需求功能较少，不需要引用外部swiper.js，直接用CSS的animate属性实现文字滚动，2秒滚动一次，实现如下:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"notice\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第1条公告第1条公告第1条公告第1条公告第1条公告第1条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第2条公告第2条公告第2条公告第2条公告第2条公告第2条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第3条公告第3条公告第3条公告第3条公告第3条公告第3条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第4条公告第4条公告第4条公告第4条公告第4条公告第4条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;<span class=\"comment\">/*先初始化一下默认样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.notice</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;<span class=\"comment\">/*单行显示，超出隐藏*/</span></span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;<span class=\"comment\">/*固定公告栏显示区域的高度*/</span></span><br><span class=\"line\"> <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#b3effe</span>;</span><br><span class=\"line\"> <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.notice</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\"> <span class=\"comment\">/*以下为了单行显示，超出隐藏*/</span></span><br><span class=\"line\"> <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"> <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\"> <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\"> <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noticeUp</span>(<span class=\"params\">obj,top,time</span>) </span>&#123;</span><br><span class=\"line\"> $(obj).animate(&#123;</span><br><span class=\"line\"> marginTop: top</span><br><span class=\"line\"> &#125;, time, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> $(<span class=\"keyword\">this</span>).css(&#123;<span class=\"attr\">marginTop</span>:<span class=\"string\">\"0\"</span>&#125;).find(<span class=\"string\">\":first\"</span>).appendTo(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> setInterval(<span class=\"string\">\"noticeUp('.notice ul','-35px',500)\"</span>, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>实现文字滚动，第一时间想用swiper进行，但是需求功能较少，不需要引用外部swiper.js，直接用CSS的animate属性实现文字滚动，2秒滚动一次，实现如下:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"notice\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第1条公告第1条公告第1条公告第1条公告第1条公告第1条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第2条公告第2条公告第2条公告第2条公告第2条公告第2条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第3条公告第3条公告第3条公告第3条公告第3条公告第3条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第4条公告第4条公告第4条公告第4条公告第4条公告第4条公告<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;<span class=\"comment\">/*先初始化一下默认样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.notice</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;<span class=\"comment\">/*单行显示，超出隐藏*/</span></span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;<span class=\"comment\">/*固定公告栏显示区域的高度*/</span></span><br><span class=\"line\"> <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#b3effe</span>;</span><br><span class=\"line\"> <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.notice</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\"> <span class=\"comment\">/*以下为了单行显示，超出隐藏*/</span></span><br><span class=\"line\"> <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"> <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\"> <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\"> <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noticeUp</span>(<span class=\"params\">obj,top,time</span>) </span>&#123;</span><br><span class=\"line\"> $(obj).animate(&#123;</span><br><span class=\"line\"> marginTop: top</span><br><span class=\"line\"> &#125;, time, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> $(<span class=\"keyword\">this</span>).css(&#123;<span class=\"attr\">marginTop</span>:<span class=\"string\">\"0\"</span>&#125;).find(<span class=\"string\">\":first\"</span>).appendTo(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> setInterval(<span class=\"string\">\"noticeUp('.notice ul','-35px',500)\"</span>, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"微信公众号本地调试小技巧","shared":false,"date":"2018-06-11T16:00:00.000Z","_content":"本地调试是公众号开发过程中不可缺少的步骤，我们不可能每次开发都上传到服务器再用微信去查看本地效果，这样一方面效率低，另一方面存在一定的风险性。那么有没有什么办法能够让开发者本地调试代码呢，答案是有的，网上搜出了很多方法，比如ngrok、花生壳、natapp.cn等工具，下面介绍的是[ngrok](https://ngrok.com/)，其他的嫌麻烦。\n\n## ngrok使用\n\n### 1. 为什么要用ngrok\n&nbsp;&nbsp;&nbsp;&nbsp;在微信开发的时候需要填写与微信服务器相连接的url才能授权，这个url必须是外网域名，也就是说我们需要在这个外网域名对应的ip服务器上做开发，而没办法本地开发调试所以用ngrok获得一个外网域名 这个外网域名实际访问的是本地主机这样把此外网域名填入到微信需要的外网url里就可以在本地开发调试了。\n\n### 2.使用ngrok\n&nbsp;&nbsp;&nbsp;&nbsp;首先到官网下载[ngrok](https://ngrok.com/)，然后注册一个ngrok帐号拿到token，这个token自定义域名的时候使用，[具体看这里](https://dashboard.ngrok.com/get-started)。我本人使用的MAC，需到ngrok目录下执行命令\n![](/images/ngrok1.png)\n这时候ngrok已经生成了一个外网域名`http://4f75fc79.ngrok.io`访问本机`localhost:80`\n![](/images/ngrok2.png)\n浏览器里直接访问`http://4f75fc79.ngrok.io`就可以访问本地。\n现在外网有了，就可以开始授权了。为了避免和线上冲突，我注册了一个微信公众号开发者测试号，已经能够调用微信开放的大多数JS接口了。创建公众号测试帐号方法可以自行百度.\n![](/images/ngrok3.jpg)\n此处有一个坑，网上很多都说这里的token是随便写的，的确，但是作为一个前端开发者，在没有后端资源情况下随便填写的token总是报token无效错误，这是因为保存修改时微信会向填写的URL发送一个验证请求，验证token是否有效，但是我们不知道token是多少，现在如何做呢？我有node.js爸爸，还怕什么呢，我们可以本地起一个服务来监听微信请求的URL，上面说到微信此时会发起一个get请求到\n`http://4f75fc79.ngrok.io`那我就本地写一个服务来监听，只要服务里的token和修改的一致不就可以匹配了吗？说干就干，直接上代码\n```js\nvar PORT=80;                 //监听80端口号\nvar http=require('http');  \nvar qs=require('qs');\nvar TOKEN='token';           //必须与测试号所填写的Token相同\n\nfunction checkSignature(params,token){\n    var key=[token,params.timestamp,params.nonce].sort().join(''); \n     //将token （自己设置的） 、timestamp（时间戳）、nonce（随机数）三个参数进行字典排序\n    var sha1=require('crypto').createHash('sha1');\n     //将上面三个字符串拼接成一个字符串再进行sha1加密\n    sha1.update(key);\n    return sha1.digest('hex') ==params.signature;\n     //将加密后的字符串与signature进行对比，若成功，返回echostr\n}\n\nvar server=http.createServer(function (request,response) {\n   var query=require('url').parse(request.url).query;\n    var params=qs.parse(query);\n\n    console.log(params);\n    console.log(\"token :\",TOKEN);\n\n\n    if(!checkSignature(params,TOKEN)){\n        //如果签名不对，结束请求并返回\n        response.end('signature fail');\n    }\n\n    if (request.method == \"GET\") {\n        //如果请求是GET，返回echostr用于通过服务器有效校验\n        response.end(params.echostr);\n    }else{\n        //否则是微信给开发者服务器的POST请求\n        var postdata='';\n        request.addListener(\"data\",function(postchunk){\n            postdata+=postchunk;\n        });\n        //获取到了POST数据\n        request.addListener(\"end\",function(){\n            console.log(postdata);\n            response.end('success ');\n        });\n    }\n});\n\nserver.listen(PORT, function () {\n    console.log('Server running at port:'+PORT);\n});\n```\n微信发起的请求直接到我们本地，那还不是我想怎么玩就怎么玩，嘿嘿嘿！具体操作看[这里](https://blog.csdn.net/yezhenxu1992/article/details/51691649)\n修改接口配置成功后就可以调用测试号里面的所有js接口了，实现本地调试微信公众号不再是奢望！！！\n","source":"_posts/ngrok.md","raw":"---\ntitle: 微信公众号本地调试小技巧\ntags:\n    - 微信公众号\ncategories:\n    - 工具\npermalink: ngrok\nshared: false\ndate: 2018-06-12\n---\n本地调试是公众号开发过程中不可缺少的步骤，我们不可能每次开发都上传到服务器再用微信去查看本地效果，这样一方面效率低，另一方面存在一定的风险性。那么有没有什么办法能够让开发者本地调试代码呢，答案是有的，网上搜出了很多方法，比如ngrok、花生壳、natapp.cn等工具，下面介绍的是[ngrok](https://ngrok.com/)，其他的嫌麻烦。\n\n## ngrok使用\n\n### 1. 为什么要用ngrok\n&nbsp;&nbsp;&nbsp;&nbsp;在微信开发的时候需要填写与微信服务器相连接的url才能授权，这个url必须是外网域名，也就是说我们需要在这个外网域名对应的ip服务器上做开发，而没办法本地开发调试所以用ngrok获得一个外网域名 这个外网域名实际访问的是本地主机这样把此外网域名填入到微信需要的外网url里就可以在本地开发调试了。\n\n### 2.使用ngrok\n&nbsp;&nbsp;&nbsp;&nbsp;首先到官网下载[ngrok](https://ngrok.com/)，然后注册一个ngrok帐号拿到token，这个token自定义域名的时候使用，[具体看这里](https://dashboard.ngrok.com/get-started)。我本人使用的MAC，需到ngrok目录下执行命令\n![](/images/ngrok1.png)\n这时候ngrok已经生成了一个外网域名`http://4f75fc79.ngrok.io`访问本机`localhost:80`\n![](/images/ngrok2.png)\n浏览器里直接访问`http://4f75fc79.ngrok.io`就可以访问本地。\n现在外网有了，就可以开始授权了。为了避免和线上冲突，我注册了一个微信公众号开发者测试号，已经能够调用微信开放的大多数JS接口了。创建公众号测试帐号方法可以自行百度.\n![](/images/ngrok3.jpg)\n此处有一个坑，网上很多都说这里的token是随便写的，的确，但是作为一个前端开发者，在没有后端资源情况下随便填写的token总是报token无效错误，这是因为保存修改时微信会向填写的URL发送一个验证请求，验证token是否有效，但是我们不知道token是多少，现在如何做呢？我有node.js爸爸，还怕什么呢，我们可以本地起一个服务来监听微信请求的URL，上面说到微信此时会发起一个get请求到\n`http://4f75fc79.ngrok.io`那我就本地写一个服务来监听，只要服务里的token和修改的一致不就可以匹配了吗？说干就干，直接上代码\n```js\nvar PORT=80;                 //监听80端口号\nvar http=require('http');  \nvar qs=require('qs');\nvar TOKEN='token';           //必须与测试号所填写的Token相同\n\nfunction checkSignature(params,token){\n    var key=[token,params.timestamp,params.nonce].sort().join(''); \n     //将token （自己设置的） 、timestamp（时间戳）、nonce（随机数）三个参数进行字典排序\n    var sha1=require('crypto').createHash('sha1');\n     //将上面三个字符串拼接成一个字符串再进行sha1加密\n    sha1.update(key);\n    return sha1.digest('hex') ==params.signature;\n     //将加密后的字符串与signature进行对比，若成功，返回echostr\n}\n\nvar server=http.createServer(function (request,response) {\n   var query=require('url').parse(request.url).query;\n    var params=qs.parse(query);\n\n    console.log(params);\n    console.log(\"token :\",TOKEN);\n\n\n    if(!checkSignature(params,TOKEN)){\n        //如果签名不对，结束请求并返回\n        response.end('signature fail');\n    }\n\n    if (request.method == \"GET\") {\n        //如果请求是GET，返回echostr用于通过服务器有效校验\n        response.end(params.echostr);\n    }else{\n        //否则是微信给开发者服务器的POST请求\n        var postdata='';\n        request.addListener(\"data\",function(postchunk){\n            postdata+=postchunk;\n        });\n        //获取到了POST数据\n        request.addListener(\"end\",function(){\n            console.log(postdata);\n            response.end('success ');\n        });\n    }\n});\n\nserver.listen(PORT, function () {\n    console.log('Server running at port:'+PORT);\n});\n```\n微信发起的请求直接到我们本地，那还不是我想怎么玩就怎么玩，嘿嘿嘿！具体操作看[这里](https://blog.csdn.net/yezhenxu1992/article/details/51691649)\n修改接口配置成功后就可以调用测试号里面的所有js接口了，实现本地调试微信公众号不再是奢望！！！\n","slug":"ngrok","published":1,"updated":"2018-09-12T08:11:35.000Z","_id":"cjlyv10dx0002cbq31r4ohz0v","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>本地调试是公众号开发过程中不可缺少的步骤，我们不可能每次开发都上传到服务器再用微信去查看本地效果，这样一方面效率低，另一方面存在一定的风险性。那么有没有什么办法能够让开发者本地调试代码呢，答案是有的，网上搜出了很多方法，比如ngrok、花生壳、natapp.cn等工具，下面介绍的是<a href=\"https://ngrok.com/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">ngrok</a>，其他的嫌麻烦。</p><h2 id=\"ngrok使用\"><a href=\"#ngrok使用\" class=\"headerlink\" title=\"ngrok使用\"></a>ngrok使用</h2><h3 id=\"1-为什么要用ngrok\"><a href=\"#1-为什么要用ngrok\" class=\"headerlink\" title=\"1. 为什么要用ngrok\"></a>1. 为什么要用ngrok</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在微信开发的时候需要填写与微信服务器相连接的url才能授权，这个url必须是外网域名，也就是说我们需要在这个外网域名对应的ip服务器上做开发，而没办法本地开发调试所以用ngrok获得一个外网域名 这个外网域名实际访问的是本地主机这样把此外网域名填入到微信需要的外网url里就可以在本地开发调试了。</p><h3 id=\"2-使用ngrok\"><a href=\"#2-使用ngrok\" class=\"headerlink\" title=\"2.使用ngrok\"></a>2.使用ngrok</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先到官网下载<a href=\"https://ngrok.com/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">ngrok</a>，然后注册一个ngrok帐号拿到token，这个token自定义域名的时候使用，<a href=\"https://dashboard.ngrok.com/get-started\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">具体看这里</a>。我本人使用的MAC，需到ngrok目录下执行命令<br><img src=\"/images/ngrok1.png\" alt=\"\"><br>这时候ngrok已经生成了一个外网域名<code>http://4f75fc79.ngrok.io</code>访问本机<code>localhost:80</code><br><img src=\"/images/ngrok2.png\" alt=\"\"><br>浏览器里直接访问<code>http://4f75fc79.ngrok.io</code>就可以访问本地。<br>现在外网有了，就可以开始授权了。为了避免和线上冲突，我注册了一个微信公众号开发者测试号，已经能够调用微信开放的大多数JS接口了。创建公众号测试帐号方法可以自行百度.<br><img src=\"/images/ngrok3.jpg\" alt=\"\"><br>此处有一个坑，网上很多都说这里的token是随便写的，的确，但是作为一个前端开发者，在没有后端资源情况下随便填写的token总是报token无效错误，这是因为保存修改时微信会向填写的URL发送一个验证请求，验证token是否有效，但是我们不知道token是多少，现在如何做呢？我有node.js爸爸，还怕什么呢，我们可以本地起一个服务来监听微信请求的URL，上面说到微信此时会发起一个get请求到<br><code>http://4f75fc79.ngrok.io</code>那我就本地写一个服务来监听，只要服务里的token和修改的一致不就可以匹配了吗？说干就干，直接上代码<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> PORT=<span class=\"number\">80</span>;                 <span class=\"comment\">//监听80端口号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http=<span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> qs=<span class=\"built_in\">require</span>(<span class=\"string\">'qs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> TOKEN=<span class=\"string\">'token'</span>;           <span class=\"comment\">//必须与测试号所填写的Token相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkSignature</span>(<span class=\"params\">params,token</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key=[token,params.timestamp,params.nonce].sort().join(<span class=\"string\">''</span>); </span><br><span class=\"line\">     <span class=\"comment\">//将token （自己设置的） 、timestamp（时间戳）、nonce（随机数）三个参数进行字典排序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sha1=<span class=\"built_in\">require</span>(<span class=\"string\">'crypto'</span>).createHash(<span class=\"string\">'sha1'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//将上面三个字符串拼接成一个字符串再进行sha1加密</span></span><br><span class=\"line\">    sha1.update(key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sha1.digest(<span class=\"string\">'hex'</span>) ==params.signature;</span><br><span class=\"line\">     <span class=\"comment\">//将加密后的字符串与signature进行对比，若成功，返回echostr</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server=http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request,response</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> query=<span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(request.url).query;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params=qs.parse(query);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"token :\"</span>,TOKEN);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!checkSignature(params,TOKEN))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果签名不对，结束请求并返回</span></span><br><span class=\"line\">        response.end(<span class=\"string\">'signature fail'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.method == <span class=\"string\">\"GET\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果请求是GET，返回echostr用于通过服务器有效校验</span></span><br><span class=\"line\">        response.end(params.echostr);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//否则是微信给开发者服务器的POST请求</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> postdata=<span class=\"string\">''</span>;</span><br><span class=\"line\">        request.addListener(<span class=\"string\">\"data\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">postchunk</span>)</span>&#123;</span><br><span class=\"line\">            postdata+=postchunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//获取到了POST数据</span></span><br><span class=\"line\">        request.addListener(<span class=\"string\">\"end\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(postdata);</span><br><span class=\"line\">            response.end(<span class=\"string\">'success '</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(PORT, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at port:'</span>+PORT);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>微信发起的请求直接到我们本地，那还不是我想怎么玩就怎么玩，嘿嘿嘿！具体操作看<a href=\"https://blog.csdn.net/yezhenxu1992/article/details/51691649\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">这里</a><br>修改接口配置成功后就可以调用测试号里面的所有js接口了，实现本地调试微信公众号不再是奢望！！！</p><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>本地调试是公众号开发过程中不可缺少的步骤，我们不可能每次开发都上传到服务器再用微信去查看本地效果，这样一方面效率低，另一方面存在一定的风险性。那么有没有什么办法能够让开发者本地调试代码呢，答案是有的，网上搜出了很多方法，比如ngrok、花生壳、natapp.cn等工具，下面介绍的是<a href=\"https://ngrok.com/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">ngrok</a>，其他的嫌麻烦。</p><h2 id=\"ngrok使用\"><a href=\"#ngrok使用\" class=\"headerlink\" title=\"ngrok使用\"></a>ngrok使用</h2><h3 id=\"1-为什么要用ngrok\"><a href=\"#1-为什么要用ngrok\" class=\"headerlink\" title=\"1. 为什么要用ngrok\"></a>1. 为什么要用ngrok</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在微信开发的时候需要填写与微信服务器相连接的url才能授权，这个url必须是外网域名，也就是说我们需要在这个外网域名对应的ip服务器上做开发，而没办法本地开发调试所以用ngrok获得一个外网域名 这个外网域名实际访问的是本地主机这样把此外网域名填入到微信需要的外网url里就可以在本地开发调试了。</p><h3 id=\"2-使用ngrok\"><a href=\"#2-使用ngrok\" class=\"headerlink\" title=\"2.使用ngrok\"></a>2.使用ngrok</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先到官网下载<a href=\"https://ngrok.com/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">ngrok</a>，然后注册一个ngrok帐号拿到token，这个token自定义域名的时候使用，<a href=\"https://dashboard.ngrok.com/get-started\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">具体看这里</a>。我本人使用的MAC，需到ngrok目录下执行命令<br><img src=\"/images/ngrok1.png\" alt=\"\"><br>这时候ngrok已经生成了一个外网域名<code>http://4f75fc79.ngrok.io</code>访问本机<code>localhost:80</code><br><img src=\"/images/ngrok2.png\" alt=\"\"><br>浏览器里直接访问<code>http://4f75fc79.ngrok.io</code>就可以访问本地。<br>现在外网有了，就可以开始授权了。为了避免和线上冲突，我注册了一个微信公众号开发者测试号，已经能够调用微信开放的大多数JS接口了。创建公众号测试帐号方法可以自行百度.<br><img src=\"/images/ngrok3.jpg\" alt=\"\"><br>此处有一个坑，网上很多都说这里的token是随便写的，的确，但是作为一个前端开发者，在没有后端资源情况下随便填写的token总是报token无效错误，这是因为保存修改时微信会向填写的URL发送一个验证请求，验证token是否有效，但是我们不知道token是多少，现在如何做呢？我有node.js爸爸，还怕什么呢，我们可以本地起一个服务来监听微信请求的URL，上面说到微信此时会发起一个get请求到<br><code>http://4f75fc79.ngrok.io</code>那我就本地写一个服务来监听，只要服务里的token和修改的一致不就可以匹配了吗？说干就干，直接上代码<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> PORT=<span class=\"number\">80</span>;                 <span class=\"comment\">//监听80端口号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http=<span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> qs=<span class=\"built_in\">require</span>(<span class=\"string\">'qs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> TOKEN=<span class=\"string\">'token'</span>;           <span class=\"comment\">//必须与测试号所填写的Token相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkSignature</span>(<span class=\"params\">params,token</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key=[token,params.timestamp,params.nonce].sort().join(<span class=\"string\">''</span>); </span><br><span class=\"line\">     <span class=\"comment\">//将token （自己设置的） 、timestamp（时间戳）、nonce（随机数）三个参数进行字典排序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sha1=<span class=\"built_in\">require</span>(<span class=\"string\">'crypto'</span>).createHash(<span class=\"string\">'sha1'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//将上面三个字符串拼接成一个字符串再进行sha1加密</span></span><br><span class=\"line\">    sha1.update(key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sha1.digest(<span class=\"string\">'hex'</span>) ==params.signature;</span><br><span class=\"line\">     <span class=\"comment\">//将加密后的字符串与signature进行对比，若成功，返回echostr</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server=http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request,response</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> query=<span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(request.url).query;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params=qs.parse(query);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"token :\"</span>,TOKEN);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!checkSignature(params,TOKEN))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果签名不对，结束请求并返回</span></span><br><span class=\"line\">        response.end(<span class=\"string\">'signature fail'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.method == <span class=\"string\">\"GET\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果请求是GET，返回echostr用于通过服务器有效校验</span></span><br><span class=\"line\">        response.end(params.echostr);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//否则是微信给开发者服务器的POST请求</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> postdata=<span class=\"string\">''</span>;</span><br><span class=\"line\">        request.addListener(<span class=\"string\">\"data\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">postchunk</span>)</span>&#123;</span><br><span class=\"line\">            postdata+=postchunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//获取到了POST数据</span></span><br><span class=\"line\">        request.addListener(<span class=\"string\">\"end\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(postdata);</span><br><span class=\"line\">            response.end(<span class=\"string\">'success '</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(PORT, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at port:'</span>+PORT);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>微信发起的请求直接到我们本地，那还不是我想怎么玩就怎么玩，嘿嘿嘿！具体操作看<a href=\"https://blog.csdn.net/yezhenxu1992/article/details/51691649\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">这里</a><br>修改接口配置成功后就可以调用测试号里面的所有js接口了，实现本地调试微信公众号不再是奢望！！！</p><!-- rebuild by neat -->"},{"title":"微信JSSDK遇到的那些坑","shared":false,"date":"2018-06-19T16:00:00.000Z","_content":"作为一个前端开发者，相信很多同道中人在微信公众号的开发中被坑的很惨，我也分享开发过程中的一点点经验给大家，可以减少很多弯路。由于项目需要，前端开发使用的是angular4.0技术，微信开发工具v1.02。前端开发公众号最坑的就是微信JSSDK的使用，前面坑路漫漫，我还得一步一步趟过去。\n\n## JSSDK使用报错\n\n### 1. config:invalid signature一直报这个错误\n&nbsp;&nbsp;&nbsp;&nbsp;`建议：首先查看微信官方网站给出的解决方案.`[链接](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html) [获取access_token](https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wxf17b04f12b73b60c&secret=345d810799934a7736f60f95ddbbf84b)\n&nbsp;&nbsp;&nbsp;&nbsp;建议按如下顺序查找错误：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.确认签名算法正确，可用 http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign 页面工具进行校验。也就是你自己后台生成签名要和微信校验算法生成的签名一致才可以（可能大小写不同）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.确认config中nonceStr（js中驼峰标准大写S）, timestamp与用以签名中的对应noncestr, timestamp一致。\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.确认url是页面完整的url(请在当前页面alert(location.href.split('#')[0])确认)，包括'http(s)://'部分，以及'？'后面的GET参数部分,但不包括'#'hash后面的部分。\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.确保一定缓存access_token和jsapi_ticket。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.出现问题的原因是参与签名的URL地址不正确，需要动态获取当前页面完整的URL地址（包括?后面的参数，但不能包含#号），如若URL地址为：`http://www.xxx.xxx/payment/wxpay/jspay?oid=xxxx&attr=xxxx#wechat`，那么完整的URL地址应该是截取#号之前的部份。为什么会出现#号呢？因为你的URL在被分享到朋友圈等微信系统自动会添加一些参数。\n&nbsp;&nbsp;&nbsp;&nbsp;PS：这里有一个大坑，就是Android和iOS对于当前页面的URL有不同的理解，iOS微信JSSDK授权易出错，但是筛选页面后又OK了，Android每次授权是OK的，具体介绍[看这里](https://gitissue.com/issues/5ab609afefbdd46ca4725b98)。原因就是因为iOS和Android对URL的识别机制不同：Android每次进行新页面时当前URL也是最新的，而iOS每次进去新页面时实际URL是第一次进入应用的URL，刷新之后当前页面URL就是最新URL。\n``` bash\n     解决办法： 在home页判断当前平台是否为iOS，若为iOS，此时通过wx.config()授权，获取直接通过window.location.href链接跳转来改变当前页面URL\n```\n\n### 2. permission denied权限错误\n&nbsp;&nbsp;&nbsp;&nbsp;首先查看微信给出的错误说明：该公众号没有权限使用这个JSAPI（部分接口需要认证之后才能使)。\n&nbsp;&nbsp;&nbsp;&nbsp;说明：只要通过了公众号认证，都不会有问题。\n&nbsp;&nbsp;&nbsp;&nbsp;检查对象：如果出现这个说明程序上基本上不会有问题 微信后台已经返回了数据。\n&nbsp;&nbsp;&nbsp;&nbsp;第一、要检查 你的config 文件中相应的 jsApiList数组中是否包含了该接口。\n```js\nwx.config({\n    debug: false,\n    appId: '',\n\ttimestamp:'',\n\tnonceStr:'',\n\tsignature:'',\n\tjsApiList: [\n\t    'checkJsApi',\n\t    'onMenuShareTimeline',\n\t    'hideOptionMenu'\n\t    ...\n\t]\n});\n```\n","source":"_posts/wx_sdk.md","raw":"---\ntitle: 微信JSSDK遇到的那些坑\ntags:\n    - 微信公众号\ncategories:\n    - 前端\npermalink: wx-sdk\nshared: false\ndate: 2018-06-20\n---\n作为一个前端开发者，相信很多同道中人在微信公众号的开发中被坑的很惨，我也分享开发过程中的一点点经验给大家，可以减少很多弯路。由于项目需要，前端开发使用的是angular4.0技术，微信开发工具v1.02。前端开发公众号最坑的就是微信JSSDK的使用，前面坑路漫漫，我还得一步一步趟过去。\n\n## JSSDK使用报错\n\n### 1. config:invalid signature一直报这个错误\n&nbsp;&nbsp;&nbsp;&nbsp;`建议：首先查看微信官方网站给出的解决方案.`[链接](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html) [获取access_token](https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wxf17b04f12b73b60c&secret=345d810799934a7736f60f95ddbbf84b)\n&nbsp;&nbsp;&nbsp;&nbsp;建议按如下顺序查找错误：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.确认签名算法正确，可用 http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign 页面工具进行校验。也就是你自己后台生成签名要和微信校验算法生成的签名一致才可以（可能大小写不同）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.确认config中nonceStr（js中驼峰标准大写S）, timestamp与用以签名中的对应noncestr, timestamp一致。\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.确认url是页面完整的url(请在当前页面alert(location.href.split('#')[0])确认)，包括'http(s)://'部分，以及'？'后面的GET参数部分,但不包括'#'hash后面的部分。\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.确保一定缓存access_token和jsapi_ticket。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.出现问题的原因是参与签名的URL地址不正确，需要动态获取当前页面完整的URL地址（包括?后面的参数，但不能包含#号），如若URL地址为：`http://www.xxx.xxx/payment/wxpay/jspay?oid=xxxx&attr=xxxx#wechat`，那么完整的URL地址应该是截取#号之前的部份。为什么会出现#号呢？因为你的URL在被分享到朋友圈等微信系统自动会添加一些参数。\n&nbsp;&nbsp;&nbsp;&nbsp;PS：这里有一个大坑，就是Android和iOS对于当前页面的URL有不同的理解，iOS微信JSSDK授权易出错，但是筛选页面后又OK了，Android每次授权是OK的，具体介绍[看这里](https://gitissue.com/issues/5ab609afefbdd46ca4725b98)。原因就是因为iOS和Android对URL的识别机制不同：Android每次进行新页面时当前URL也是最新的，而iOS每次进去新页面时实际URL是第一次进入应用的URL，刷新之后当前页面URL就是最新URL。\n``` bash\n     解决办法： 在home页判断当前平台是否为iOS，若为iOS，此时通过wx.config()授权，获取直接通过window.location.href链接跳转来改变当前页面URL\n```\n\n### 2. permission denied权限错误\n&nbsp;&nbsp;&nbsp;&nbsp;首先查看微信给出的错误说明：该公众号没有权限使用这个JSAPI（部分接口需要认证之后才能使)。\n&nbsp;&nbsp;&nbsp;&nbsp;说明：只要通过了公众号认证，都不会有问题。\n&nbsp;&nbsp;&nbsp;&nbsp;检查对象：如果出现这个说明程序上基本上不会有问题 微信后台已经返回了数据。\n&nbsp;&nbsp;&nbsp;&nbsp;第一、要检查 你的config 文件中相应的 jsApiList数组中是否包含了该接口。\n```js\nwx.config({\n    debug: false,\n    appId: '',\n\ttimestamp:'',\n\tnonceStr:'',\n\tsignature:'',\n\tjsApiList: [\n\t    'checkJsApi',\n\t    'onMenuShareTimeline',\n\t    'hideOptionMenu'\n\t    ...\n\t]\n});\n```\n","slug":"wx-sdk","published":1,"updated":"2018-09-12T08:12:00.000Z","_id":"cjlyv10e30006cbq387sj3sot","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>作为一个前端开发者，相信很多同道中人在微信公众号的开发中被坑的很惨，我也分享开发过程中的一点点经验给大家，可以减少很多弯路。由于项目需要，前端开发使用的是angular4.0技术，微信开发工具v1.02。前端开发公众号最坑的就是微信JSSDK的使用，前面坑路漫漫，我还得一步一步趟过去。</p><h2 id=\"JSSDK使用报错\"><a href=\"#JSSDK使用报错\" class=\"headerlink\" title=\"JSSDK使用报错\"></a>JSSDK使用报错</h2><h3 id=\"1-config-invalid-signature一直报这个错误\"><a href=\"#1-config-invalid-signature一直报这个错误\" class=\"headerlink\" title=\"1. config:invalid signature一直报这个错误\"></a>1. config:invalid signature一直报这个错误</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>建议：首先查看微信官方网站给出的解决方案.</code><a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">链接</a> <a href=\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wxf17b04f12b73b60c&amp;secret=345d810799934a7736f60f95ddbbf84b\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">获取access_token</a><br>&nbsp;&nbsp;&nbsp;&nbsp;建议按如下顺序查找错误：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.确认签名算法正确，可用 <a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a> 页面工具进行校验。也就是你自己后台生成签名要和微信校验算法生成的签名一致才可以（可能大小写不同）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.确认config中nonceStr（js中驼峰标准大写S）, timestamp与用以签名中的对应noncestr, timestamp一致。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.确认url是页面完整的url(请在当前页面alert(location.href.split(‘#’)[0])确认)，包括’http(s)://‘部分，以及’？’后面的GET参数部分,但不包括’#’hash后面的部分。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.确保一定缓存access_token和jsapi_ticket。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.出现问题的原因是参与签名的URL地址不正确，需要动态获取当前页面完整的URL地址（包括?后面的参数，但不能包含#号），如若URL地址为：<code>http://www.xxx.xxx/payment/wxpay/jspay?oid=xxxx&amp;attr=xxxx#wechat</code>，那么完整的URL地址应该是截取#号之前的部份。为什么会出现#号呢？因为你的URL在被分享到朋友圈等微信系统自动会添加一些参数。<br>&nbsp;&nbsp;&nbsp;&nbsp;PS：这里有一个大坑，就是Android和iOS对于当前页面的URL有不同的理解，iOS微信JSSDK授权易出错，但是筛选页面后又OK了，Android每次授权是OK的，具体介绍<a href=\"https://gitissue.com/issues/5ab609afefbdd46ca4725b98\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">看这里</a>。原因就是因为iOS和Android对URL的识别机制不同：Android每次进行新页面时当前URL也是最新的，而iOS每次进去新页面时实际URL是第一次进入应用的URL，刷新之后当前页面URL就是最新URL。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">解决办法： 在home页判断当前平台是否为iOS，若为iOS，此时通过wx.config()授权，获取直接通过window.location.href链接跳转来改变当前页面URL</span><br></pre></td></tr></table></figure><p></p><h3 id=\"2-permission-denied权限错误\"><a href=\"#2-permission-denied权限错误\" class=\"headerlink\" title=\"2. permission denied权限错误\"></a>2. permission denied权限错误</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先查看微信给出的错误说明：该公众号没有权限使用这个JSAPI（部分接口需要认证之后才能使)。<br>&nbsp;&nbsp;&nbsp;&nbsp;说明：只要通过了公众号认证，都不会有问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;检查对象：如果出现这个说明程序上基本上不会有问题 微信后台已经返回了数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;第一、要检查 你的config 文件中相应的 jsApiList数组中是否包含了该接口。<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    appId: <span class=\"string\">''</span>,</span><br><span class=\"line\">\ttimestamp:<span class=\"string\">''</span>,</span><br><span class=\"line\">\tnonceStr:<span class=\"string\">''</span>,</span><br><span class=\"line\">\tsignature:<span class=\"string\">''</span>,</span><br><span class=\"line\">\tjsApiList: [</span><br><span class=\"line\">\t    <span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">\t    <span class=\"string\">'onMenuShareTimeline'</span>,</span><br><span class=\"line\">\t    <span class=\"string\">'hideOptionMenu'</span></span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>作为一个前端开发者，相信很多同道中人在微信公众号的开发中被坑的很惨，我也分享开发过程中的一点点经验给大家，可以减少很多弯路。由于项目需要，前端开发使用的是angular4.0技术，微信开发工具v1.02。前端开发公众号最坑的就是微信JSSDK的使用，前面坑路漫漫，我还得一步一步趟过去。</p><h2 id=\"JSSDK使用报错\"><a href=\"#JSSDK使用报错\" class=\"headerlink\" title=\"JSSDK使用报错\"></a>JSSDK使用报错</h2><h3 id=\"1-config-invalid-signature一直报这个错误\"><a href=\"#1-config-invalid-signature一直报这个错误\" class=\"headerlink\" title=\"1. config:invalid signature一直报这个错误\"></a>1. config:invalid signature一直报这个错误</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>建议：首先查看微信官方网站给出的解决方案.</code><a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">链接</a> <a href=\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wxf17b04f12b73b60c&amp;secret=345d810799934a7736f60f95ddbbf84b\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">获取access_token</a><br>&nbsp;&nbsp;&nbsp;&nbsp;建议按如下顺序查找错误：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.确认签名算法正确，可用 <a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a> 页面工具进行校验。也就是你自己后台生成签名要和微信校验算法生成的签名一致才可以（可能大小写不同）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.确认config中nonceStr（js中驼峰标准大写S）, timestamp与用以签名中的对应noncestr, timestamp一致。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.确认url是页面完整的url(请在当前页面alert(location.href.split(‘#’)[0])确认)，包括’http(s)://‘部分，以及’？’后面的GET参数部分,但不包括’#’hash后面的部分。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.确保一定缓存access_token和jsapi_ticket。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.出现问题的原因是参与签名的URL地址不正确，需要动态获取当前页面完整的URL地址（包括?后面的参数，但不能包含#号），如若URL地址为：<code>http://www.xxx.xxx/payment/wxpay/jspay?oid=xxxx&amp;attr=xxxx#wechat</code>，那么完整的URL地址应该是截取#号之前的部份。为什么会出现#号呢？因为你的URL在被分享到朋友圈等微信系统自动会添加一些参数。<br>&nbsp;&nbsp;&nbsp;&nbsp;PS：这里有一个大坑，就是Android和iOS对于当前页面的URL有不同的理解，iOS微信JSSDK授权易出错，但是筛选页面后又OK了，Android每次授权是OK的，具体介绍<a href=\"https://gitissue.com/issues/5ab609afefbdd46ca4725b98\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">看这里</a>。原因就是因为iOS和Android对URL的识别机制不同：Android每次进行新页面时当前URL也是最新的，而iOS每次进去新页面时实际URL是第一次进入应用的URL，刷新之后当前页面URL就是最新URL。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">解决办法： 在home页判断当前平台是否为iOS，若为iOS，此时通过wx.config()授权，获取直接通过window.location.href链接跳转来改变当前页面URL</span><br></pre></td></tr></table></figure><p></p><h3 id=\"2-permission-denied权限错误\"><a href=\"#2-permission-denied权限错误\" class=\"headerlink\" title=\"2. permission denied权限错误\"></a>2. permission denied权限错误</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先查看微信给出的错误说明：该公众号没有权限使用这个JSAPI（部分接口需要认证之后才能使)。<br>&nbsp;&nbsp;&nbsp;&nbsp;说明：只要通过了公众号认证，都不会有问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;检查对象：如果出现这个说明程序上基本上不会有问题 微信后台已经返回了数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;第一、要检查 你的config 文件中相应的 jsApiList数组中是否包含了该接口。<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    appId: <span class=\"string\">''</span>,</span><br><span class=\"line\">\ttimestamp:<span class=\"string\">''</span>,</span><br><span class=\"line\">\tnonceStr:<span class=\"string\">''</span>,</span><br><span class=\"line\">\tsignature:<span class=\"string\">''</span>,</span><br><span class=\"line\">\tjsApiList: [</span><br><span class=\"line\">\t    <span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">\t    <span class=\"string\">'onMenuShareTimeline'</span>,</span><br><span class=\"line\">\t    <span class=\"string\">'hideOptionMenu'</span></span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"与小程序的相爱相杀","shared":false,"date":"2018-09-11T16:00:00.000Z","_content":"\n#### Q1：自定义组件时，canvas组件无法注册\n\n```js\n ready(){\n    const ctx = wx.createCanvasContext('back-canvas')\n    ctx.setFillStyle('red')\n    ctx.fillRect(10, 10, 150, 75)\n    ctx.draw();\n  }\n```\n```html\n<canvas class='canvas' canvas-id=\"back-canvas\" style=\"width:200px;height:200px;\"></canvas>\n```\n\n```js\n// createCanvasContext方法是有两个参数的，在page页面默认传了一个this,组件里面 需要手动传this\nconst ctx = wx.createCanvasContext('myCanvas',this);\n```\n     \n#### Q2：使用image标签的binderror方法，避免图片URL无效\n#### Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\n#### Q4：选择拍照功能和相册选择图片，原有的页面会onHide\n#### Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\n#### Q6：wx.createInnerAudioContext()播放语音先try销毁再新建\n#### Q7：小程序console过多报错: [转](https://blog.csdn.net/rolan1993/article/details/80431569)\n```\n Uncaught TypeError: Converting circular structure to JSON\n \n 解决办法： 注释掉console.log\n```\n#### Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中...\n#### Q9：wxs文件解决wxml中不能写计算逻辑问题\n#### Q10：setData修改数组某一项值时可以不用全局赋值\n\n```\nvar price = 'goods['+index+'].price'\nthis.setData({\n    [price]:'changed data'\n})\n```\n\n#### Q11：微信小程序超级大坑之40029（invalid code）\n\n```html\n在小程序新建的时候就应该输入你正式的AppID，如果使用修改的AppID，则无法使用。\n\njscode2session会返回{\"errcode\":40029,\"errmsg\":\"invalid code, hints: [ req_id: m3yw8a0472th20 ]\"}\n\n不能通过修改project.config.json中的AppID来实现：\n\n必须重新创建新的小程序项目。\n```\n\n#### Q12：web-view会自动修改导航栏标题 (暂无方案)\n\n#### Q13：小程序里修改swiper指示点位置居右\n\n```css\n.wx-swiper-dots.wx-swiper-dots-horizontal{\n    position:absolute;\n    right:0rpx;\n    padding-right: 30rpx;\n    text-align: right;\n    width: 100%;\n}\n```\n\n#### Q14：iOS上new Date()出现NAN情况\n\n```\nAndroid: +new Date('2018-09-10 13:23') =1536556980000\niOS: +new Date('2018-09-10 13:23') = NAN\n\nios手机上不能正确转换这种格式，将-改为/就可以了，如：\n\nAndroid: +new Date('2018/09/10 13:23') =1536556980000\niOS: +new Date('2018/09/10 13:23') = 1536556980000\n\n```\n","source":"_posts/与小程序间的相爱相杀.md","raw":"---\ntitle: 与小程序的相爱相杀\ntags:\n    - 小程序\ncategories:\n    - 前端\npermalink: wechat-applet\nshared: false\ndate: 2018-09-12\n---\n\n#### Q1：自定义组件时，canvas组件无法注册\n\n```js\n ready(){\n    const ctx = wx.createCanvasContext('back-canvas')\n    ctx.setFillStyle('red')\n    ctx.fillRect(10, 10, 150, 75)\n    ctx.draw();\n  }\n```\n```html\n<canvas class='canvas' canvas-id=\"back-canvas\" style=\"width:200px;height:200px;\"></canvas>\n```\n\n```js\n// createCanvasContext方法是有两个参数的，在page页面默认传了一个this,组件里面 需要手动传this\nconst ctx = wx.createCanvasContext('myCanvas',this);\n```\n     \n#### Q2：使用image标签的binderror方法，避免图片URL无效\n#### Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\n#### Q4：选择拍照功能和相册选择图片，原有的页面会onHide\n#### Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\n#### Q6：wx.createInnerAudioContext()播放语音先try销毁再新建\n#### Q7：小程序console过多报错: [转](https://blog.csdn.net/rolan1993/article/details/80431569)\n```\n Uncaught TypeError: Converting circular structure to JSON\n \n 解决办法： 注释掉console.log\n```\n#### Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中...\n#### Q9：wxs文件解决wxml中不能写计算逻辑问题\n#### Q10：setData修改数组某一项值时可以不用全局赋值\n\n```\nvar price = 'goods['+index+'].price'\nthis.setData({\n    [price]:'changed data'\n})\n```\n\n#### Q11：微信小程序超级大坑之40029（invalid code）\n\n```html\n在小程序新建的时候就应该输入你正式的AppID，如果使用修改的AppID，则无法使用。\n\njscode2session会返回{\"errcode\":40029,\"errmsg\":\"invalid code, hints: [ req_id: m3yw8a0472th20 ]\"}\n\n不能通过修改project.config.json中的AppID来实现：\n\n必须重新创建新的小程序项目。\n```\n\n#### Q12：web-view会自动修改导航栏标题 (暂无方案)\n\n#### Q13：小程序里修改swiper指示点位置居右\n\n```css\n.wx-swiper-dots.wx-swiper-dots-horizontal{\n    position:absolute;\n    right:0rpx;\n    padding-right: 30rpx;\n    text-align: right;\n    width: 100%;\n}\n```\n\n#### Q14：iOS上new Date()出现NAN情况\n\n```\nAndroid: +new Date('2018-09-10 13:23') =1536556980000\niOS: +new Date('2018-09-10 13:23') = NAN\n\nios手机上不能正确转换这种格式，将-改为/就可以了，如：\n\nAndroid: +new Date('2018/09/10 13:23') =1536556980000\niOS: +new Date('2018/09/10 13:23') = 1536556980000\n\n```\n","slug":"wechat-applet","published":1,"updated":"2018-09-12T08:27:50.000Z","_id":"cjlyv10e60008cbq3u8qvzrxe","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><h4 id=\"Q1：自定义组件时，canvas组件无法注册\"><a href=\"#Q1：自定义组件时，canvas组件无法注册\" class=\"headerlink\" title=\"Q1：自定义组件时，canvas组件无法注册\"></a>Q1：自定义组件时，canvas组件无法注册</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ready()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'back-canvas'</span>)</span><br><span class=\"line\">   ctx.setFillStyle(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">   ctx.fillRect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">150</span>, <span class=\"number\">75</span>)</span><br><span class=\"line\">   ctx.draw();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">'canvas'</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"back-canvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:200px;height:200px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// createCanvasContext方法是有两个参数的，在page页面默认传了一个this,组件里面 需要手动传this</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'myCanvas'</span>,<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure><h4 id=\"Q2：使用image标签的binderror方法，避免图片URL无效\"><a href=\"#Q2：使用image标签的binderror方法，避免图片URL无效\" class=\"headerlink\" title=\"Q2：使用image标签的binderror方法，避免图片URL无效\"></a>Q2：使用image标签的binderror方法，避免图片URL无效</h4><h4 id=\"Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\"><a href=\"#Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\" class=\"headerlink\" title=\"Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\"></a>Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次</h4><h4 id=\"Q4：选择拍照功能和相册选择图片，原有的页面会onHide\"><a href=\"#Q4：选择拍照功能和相册选择图片，原有的页面会onHide\" class=\"headerlink\" title=\"Q4：选择拍照功能和相册选择图片，原有的页面会onHide\"></a>Q4：选择拍照功能和相册选择图片，原有的页面会onHide</h4><h4 id=\"Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\"><a href=\"#Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\" class=\"headerlink\" title=\"Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\"></a>Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom</h4><h4 id=\"Q6：wx-createInnerAudioContext-播放语音先try销毁再新建\"><a href=\"#Q6：wx-createInnerAudioContext-播放语音先try销毁再新建\" class=\"headerlink\" title=\"Q6：wx.createInnerAudioContext()播放语音先try销毁再新建\"></a>Q6：wx.createInnerAudioContext()播放语音先try销毁再新建</h4><h4 id=\"Q7：小程序console过多报错-转\"><a href=\"#Q7：小程序console过多报错-转\" class=\"headerlink\" title=\"Q7：小程序console过多报错: 转\"></a>Q7：小程序console过多报错: <a href=\"https://blog.csdn.net/rolan1993/article/details/80431569\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">转</a></h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"line\"></span><br><span class=\"line\">解决办法： 注释掉console.log</span><br></pre></td></tr></table></figure><h4 id=\"Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…\"><a href=\"#Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…\" class=\"headerlink\" title=\"Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…\"></a>Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…</h4><h4 id=\"Q9：wxs文件解决wxml中不能写计算逻辑问题\"><a href=\"#Q9：wxs文件解决wxml中不能写计算逻辑问题\" class=\"headerlink\" title=\"Q9：wxs文件解决wxml中不能写计算逻辑问题\"></a>Q9：wxs文件解决wxml中不能写计算逻辑问题</h4><h4 id=\"Q10：setData修改数组某一项值时可以不用全局赋值\"><a href=\"#Q10：setData修改数组某一项值时可以不用全局赋值\" class=\"headerlink\" title=\"Q10：setData修改数组某一项值时可以不用全局赋值\"></a>Q10：setData修改数组某一项值时可以不用全局赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var price = &apos;goods[&apos;+index+&apos;].price&apos;</span><br><span class=\"line\">this.setData(&#123;</span><br><span class=\"line\">    [price]:&apos;changed data&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h4 id=\"Q11：微信小程序超级大坑之40029（invalid-code）\"><a href=\"#Q11：微信小程序超级大坑之40029（invalid-code）\" class=\"headerlink\" title=\"Q11：微信小程序超级大坑之40029（invalid code）\"></a>Q11：微信小程序超级大坑之40029（invalid code）</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">在小程序新建的时候就应该输入你正式的AppID，如果使用修改的AppID，则无法使用。</span><br><span class=\"line\"></span><br><span class=\"line\">jscode2session会返回&#123;\"errcode\":40029,\"errmsg\":\"invalid code, hints: [ req_id: m3yw8a0472th20 ]\"&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">不能通过修改project.config.json中的AppID来实现：</span><br><span class=\"line\"></span><br><span class=\"line\">必须重新创建新的小程序项目。</span><br></pre></td></tr></table></figure><h4 id=\"Q12：web-view会自动修改导航栏标题-暂无方案\"><a href=\"#Q12：web-view会自动修改导航栏标题-暂无方案\" class=\"headerlink\" title=\"Q12：web-view会自动修改导航栏标题 (暂无方案)\"></a>Q12：web-view会自动修改导航栏标题 (暂无方案)</h4><h4 id=\"Q13：小程序里修改swiper指示点位置居右\"><a href=\"#Q13：小程序里修改swiper指示点位置居右\" class=\"headerlink\" title=\"Q13：小程序里修改swiper指示点位置居右\"></a>Q13：小程序里修改swiper指示点位置居右</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wx-swiper-dots</span><span class=\"selector-class\">.wx-swiper-dots-horizontal</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>rpx;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">30</span>rpx;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Q14：iOS上new-Date-出现NAN情况\"><a href=\"#Q14：iOS上new-Date-出现NAN情况\" class=\"headerlink\" title=\"Q14：iOS上new Date()出现NAN情况\"></a>Q14：iOS上new Date()出现NAN情况</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Android: +new Date(&apos;2018-09-10 13:23&apos;) =1536556980000</span><br><span class=\"line\">iOS: +new Date(&apos;2018-09-10 13:23&apos;) = NAN</span><br><span class=\"line\"></span><br><span class=\"line\">ios手机上不能正确转换这种格式，将-改为/就可以了，如：</span><br><span class=\"line\"></span><br><span class=\"line\">Android: +new Date(&apos;2018/09/10 13:23&apos;) =1536556980000</span><br><span class=\"line\">iOS: +new Date(&apos;2018/09/10 13:23&apos;) = 1536556980000</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><h4 id=\"Q1：自定义组件时，canvas组件无法注册\"><a href=\"#Q1：自定义组件时，canvas组件无法注册\" class=\"headerlink\" title=\"Q1：自定义组件时，canvas组件无法注册\"></a>Q1：自定义组件时，canvas组件无法注册</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ready()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'back-canvas'</span>)</span><br><span class=\"line\">   ctx.setFillStyle(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">   ctx.fillRect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">150</span>, <span class=\"number\">75</span>)</span><br><span class=\"line\">   ctx.draw();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">'canvas'</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"back-canvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:200px;height:200px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// createCanvasContext方法是有两个参数的，在page页面默认传了一个this,组件里面 需要手动传this</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'myCanvas'</span>,<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure><h4 id=\"Q2：使用image标签的binderror方法，避免图片URL无效\"><a href=\"#Q2：使用image标签的binderror方法，避免图片URL无效\" class=\"headerlink\" title=\"Q2：使用image标签的binderror方法，避免图片URL无效\"></a>Q2：使用image标签的binderror方法，避免图片URL无效</h4><h4 id=\"Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\"><a href=\"#Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\" class=\"headerlink\" title=\"Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次\"></a>Q3：生命周期onLoad只加载一次只是对页面不属于栈顶有效，如果页面属于栈顶，则页面onLoad会随页面加载多次</h4><h4 id=\"Q4：选择拍照功能和相册选择图片，原有的页面会onHide\"><a href=\"#Q4：选择拍照功能和相册选择图片，原有的页面会onHide\" class=\"headerlink\" title=\"Q4：选择拍照功能和相册选择图片，原有的页面会onHide\"></a>Q4：选择拍照功能和相册选择图片，原有的页面会onHide</h4><h4 id=\"Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\"><a href=\"#Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\" class=\"headerlink\" title=\"Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom\"></a>Q5：margin-bottom在iOS环境下无效，建议改成padding-bottom</h4><h4 id=\"Q6：wx-createInnerAudioContext-播放语音先try销毁再新建\"><a href=\"#Q6：wx-createInnerAudioContext-播放语音先try销毁再新建\" class=\"headerlink\" title=\"Q6：wx.createInnerAudioContext()播放语音先try销毁再新建\"></a>Q6：wx.createInnerAudioContext()播放语音先try销毁再新建</h4><h4 id=\"Q7：小程序console过多报错-转\"><a href=\"#Q7：小程序console过多报错-转\" class=\"headerlink\" title=\"Q7：小程序console过多报错: 转\"></a>Q7：小程序console过多报错: <a href=\"https://blog.csdn.net/rolan1993/article/details/80431569\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">转</a></h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"line\"></span><br><span class=\"line\">解决办法： 注释掉console.log</span><br></pre></td></tr></table></figure><h4 id=\"Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…\"><a href=\"#Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…\" class=\"headerlink\" title=\"Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…\"></a>Q8：setNavigationBarTitle动态异步设置title存在bug，目前官方正在解决中…</h4><h4 id=\"Q9：wxs文件解决wxml中不能写计算逻辑问题\"><a href=\"#Q9：wxs文件解决wxml中不能写计算逻辑问题\" class=\"headerlink\" title=\"Q9：wxs文件解决wxml中不能写计算逻辑问题\"></a>Q9：wxs文件解决wxml中不能写计算逻辑问题</h4><h4 id=\"Q10：setData修改数组某一项值时可以不用全局赋值\"><a href=\"#Q10：setData修改数组某一项值时可以不用全局赋值\" class=\"headerlink\" title=\"Q10：setData修改数组某一项值时可以不用全局赋值\"></a>Q10：setData修改数组某一项值时可以不用全局赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var price = &apos;goods[&apos;+index+&apos;].price&apos;</span><br><span class=\"line\">this.setData(&#123;</span><br><span class=\"line\">    [price]:&apos;changed data&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h4 id=\"Q11：微信小程序超级大坑之40029（invalid-code）\"><a href=\"#Q11：微信小程序超级大坑之40029（invalid-code）\" class=\"headerlink\" title=\"Q11：微信小程序超级大坑之40029（invalid code）\"></a>Q11：微信小程序超级大坑之40029（invalid code）</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">在小程序新建的时候就应该输入你正式的AppID，如果使用修改的AppID，则无法使用。</span><br><span class=\"line\"></span><br><span class=\"line\">jscode2session会返回&#123;\"errcode\":40029,\"errmsg\":\"invalid code, hints: [ req_id: m3yw8a0472th20 ]\"&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">不能通过修改project.config.json中的AppID来实现：</span><br><span class=\"line\"></span><br><span class=\"line\">必须重新创建新的小程序项目。</span><br></pre></td></tr></table></figure><h4 id=\"Q12：web-view会自动修改导航栏标题-暂无方案\"><a href=\"#Q12：web-view会自动修改导航栏标题-暂无方案\" class=\"headerlink\" title=\"Q12：web-view会自动修改导航栏标题 (暂无方案)\"></a>Q12：web-view会自动修改导航栏标题 (暂无方案)</h4><h4 id=\"Q13：小程序里修改swiper指示点位置居右\"><a href=\"#Q13：小程序里修改swiper指示点位置居右\" class=\"headerlink\" title=\"Q13：小程序里修改swiper指示点位置居右\"></a>Q13：小程序里修改swiper指示点位置居右</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wx-swiper-dots</span><span class=\"selector-class\">.wx-swiper-dots-horizontal</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>rpx;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">30</span>rpx;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Q14：iOS上new-Date-出现NAN情况\"><a href=\"#Q14：iOS上new-Date-出现NAN情况\" class=\"headerlink\" title=\"Q14：iOS上new Date()出现NAN情况\"></a>Q14：iOS上new Date()出现NAN情况</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Android: +new Date(&apos;2018-09-10 13:23&apos;) =1536556980000</span><br><span class=\"line\">iOS: +new Date(&apos;2018-09-10 13:23&apos;) = NAN</span><br><span class=\"line\"></span><br><span class=\"line\">ios手机上不能正确转换这种格式，将-改为/就可以了，如：</span><br><span class=\"line\"></span><br><span class=\"line\">Android: +new Date(&apos;2018/09/10 13:23&apos;) =1536556980000</span><br><span class=\"line\">iOS: +new Date(&apos;2018/09/10 13:23&apos;) = 1536556980000</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"前端实现在线预览pdf、word、xls、ppt等文件","shared":false,"date":"2018-07-13T16:00:00.000Z","_content":"\n## 1、前端实现pdf文件在线预览功能\n### 方式一: 通过a标签href属性实现\npdf文件理论上可以在浏览器直接打开预览但是需要打开新页面。在仅仅是预览pdf文件且UI要求不高的情况下可以直接通过a标签href属性实现预览\n```html\n<a href=\"文档地址\"></a>\n```\n\n### 方式二: 通过jquery插件jquery.media.js实现\n这个插件可以实现pdf预览功能（包括其他各种媒体文件）但是对word等类型的文件无能为力。\n实现方式：\n```html\n<script type=\"text/javascript\" src=\"jquery-1.7.1.min.js\"></script>  \n<script type=\"text/javascript\" src=\"jquery.media.js\"></script>\nhtml结构：\n      <body>\n          <div id=\"handout_wrap_inner\"></div>\n      </body>\n调用方式：\n<script type=\"text/javascript\">  \n $('#handout_wrap_inner').media({\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tautoplay: true,\n        src:'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf',\n            }); \n</script>\n```\n### 方式三: 直接通过页面内嵌iframe\n```html\n$(\"<iframe src='\"+ this.previewUrl +\"' width='100%' height='362px' frameborder='1'>\").appendTo($(\".video-handouts-preview\"));\n此外还可以在iframe标签之间提供一个提示类似这样\n<iframe :src=\"previewUrl\" width=\"100%\" height=\"100%\">\n\nThis browser does not support PDFs. Please download the PDF to view it: <a :href=\"previewUrl\">Download PDF</a>\n\n</iframe>\n```\n### 方式四: 通过标签嵌入内容\n```html\n<embed :src=\"previewUrl\" type=\"application/pdf\" width=\"100%\" height=\"100%\">\n此标签h5特性中包含四个属性：高、宽、类型、预览文件src！\n与< iframe > < / iframe > 不同，这个标签是自闭合的的，也就是说如果浏览器不支持PDF的嵌入，那么这个标签的内容什么都看不到！\n\n```\n### 方式五: 标签和iframe使用差别较小\n```html\n<object :src=\"previewUrl\" width=\"100%\" height=\"100%\">\n\nThis browser does not support PDFs. Please download the PDF to view it: <a :href=\"previewUrl\">Download PDF</a>\n\n</object>\n```\n除方式二以外其他都是直接通过标签将内容引入页面实现预览\n### 方式六: PDFObject\nPDFObject实际上也是通过标签实现的直接上代码\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Show PDF</title>\n    <meta charset=\"utf-8\" />\n    <script type=\"text/javascript\" src='pdfobject.min.js'></script>\n    <style type=\"text/css\">\n        html,body,#pdf_viewer{\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            padding: 0;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"pdf_viewer\"></div>\n</body>\n<script type=\"text/javascript\">\n    if(PDFObject.supportsPDFs){\n        // PDF嵌入到网页\n        PDFObject.embed(\"index.pdf\", \"#pdf_viewer\" );\n    } else {\n        location.href = \"/canvas\";\n    }\n    \n    // 还可以通过以下代码进行判断是否支持PDFObject预览\n    if(PDFObject.supportsPDFs){\n       console.log(\"Yay, this browser supports inline PDFs.\");\n    } else {\n       console.log(\"Boo, inline PDFs are not supported by this browser\");\n    }\n</script>\n</html>\n```\n\n### 方式七: PDF.js ([简单粗暴](../../../../2018/07/22/preview-pdf/))\nPDF.js可以实现在html下直接浏览pdf文档，是一款开源的pdf文档读取解析插件，非常强大，能将PDF文件渲染成Canvas。PDF.js主要包含两个库文件，一个pdf.js和一个pdf.worker.js，一个负责API解析，一个负责核心解析。\n\n## 2、word、xls、ppt文件在线预览功能\nword、ppt、xls文件实现在线预览的方式比较简单可以直接通过调用微软的在线预览功能实现 (预览前提：资源必须是公共可访问的)\n```html\n<iframe src='https://view.officeapps.live.com/op/view.aspx?src=http://storage.xuetangx.com/public_assets/xuetangx/PDF/1.xls' width='100%' height='100%' frameborder='1'>\n</iframe>\n/*src就是要实现预览的文件地址*/\n/*具体文档看这微软接口文档*/\n/*补充：google的文档在线预览实现同微软（资源必须是公共可访问的）*/\n<iframe :src=\"'https://docs.google.com/viewer?url=\"fileurl\"></iframe>\n```\n## 3、word文件\nXDOC可以实现预览以DataURI表示的DOC文档，此外XDOC还可以实现文本、带参数文本、html文本、json文本、公文等在线预览，具体实现方法请看官方文档下面这种方式可以实现快速预览word但是对文件使用的编辑器可能会有一些限制\n```html\n<a href=\"http://www.xdocin.com/xdoc?_func=to&amp;_format=html&amp;_cache=1&amp;_xdoc=http://www.xdocin.com/demo/demo.docx\" target=\"_blank\" rel=\"nofollow\">XDOC</a>\n```\n## 4、excel文件\n目前excel文件已经有了类似pdf.js那样的解析sheet.js\n## 总结\n1、免费纯前端方式实现在线预览word、excel、ppt最优选择微软在线预览（不可编辑）\n2、利用后端将文件转为图片，前端以图片形式预览（可行方案）\n3、购买在线预览服务例如百度DOC文档服务、永中、I DOC VIEW等\n\n[转载](https://juejin.im/post/5a7badf26fb9a063353198a1)","source":"_posts/前端预览文件.md","raw":"---\ntitle: 前端实现在线预览pdf、word、xls、ppt等文件\ntags:\n    - JS\ncategories:\n    - 前端\npermalink: preview-file\nshared: false\ndate: 2018-07-14\n---\n\n## 1、前端实现pdf文件在线预览功能\n### 方式一: 通过a标签href属性实现\npdf文件理论上可以在浏览器直接打开预览但是需要打开新页面。在仅仅是预览pdf文件且UI要求不高的情况下可以直接通过a标签href属性实现预览\n```html\n<a href=\"文档地址\"></a>\n```\n\n### 方式二: 通过jquery插件jquery.media.js实现\n这个插件可以实现pdf预览功能（包括其他各种媒体文件）但是对word等类型的文件无能为力。\n实现方式：\n```html\n<script type=\"text/javascript\" src=\"jquery-1.7.1.min.js\"></script>  \n<script type=\"text/javascript\" src=\"jquery.media.js\"></script>\nhtml结构：\n      <body>\n          <div id=\"handout_wrap_inner\"></div>\n      </body>\n调用方式：\n<script type=\"text/javascript\">  \n $('#handout_wrap_inner').media({\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tautoplay: true,\n        src:'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf',\n            }); \n</script>\n```\n### 方式三: 直接通过页面内嵌iframe\n```html\n$(\"<iframe src='\"+ this.previewUrl +\"' width='100%' height='362px' frameborder='1'>\").appendTo($(\".video-handouts-preview\"));\n此外还可以在iframe标签之间提供一个提示类似这样\n<iframe :src=\"previewUrl\" width=\"100%\" height=\"100%\">\n\nThis browser does not support PDFs. Please download the PDF to view it: <a :href=\"previewUrl\">Download PDF</a>\n\n</iframe>\n```\n### 方式四: 通过标签嵌入内容\n```html\n<embed :src=\"previewUrl\" type=\"application/pdf\" width=\"100%\" height=\"100%\">\n此标签h5特性中包含四个属性：高、宽、类型、预览文件src！\n与< iframe > < / iframe > 不同，这个标签是自闭合的的，也就是说如果浏览器不支持PDF的嵌入，那么这个标签的内容什么都看不到！\n\n```\n### 方式五: 标签和iframe使用差别较小\n```html\n<object :src=\"previewUrl\" width=\"100%\" height=\"100%\">\n\nThis browser does not support PDFs. Please download the PDF to view it: <a :href=\"previewUrl\">Download PDF</a>\n\n</object>\n```\n除方式二以外其他都是直接通过标签将内容引入页面实现预览\n### 方式六: PDFObject\nPDFObject实际上也是通过标签实现的直接上代码\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Show PDF</title>\n    <meta charset=\"utf-8\" />\n    <script type=\"text/javascript\" src='pdfobject.min.js'></script>\n    <style type=\"text/css\">\n        html,body,#pdf_viewer{\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            padding: 0;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"pdf_viewer\"></div>\n</body>\n<script type=\"text/javascript\">\n    if(PDFObject.supportsPDFs){\n        // PDF嵌入到网页\n        PDFObject.embed(\"index.pdf\", \"#pdf_viewer\" );\n    } else {\n        location.href = \"/canvas\";\n    }\n    \n    // 还可以通过以下代码进行判断是否支持PDFObject预览\n    if(PDFObject.supportsPDFs){\n       console.log(\"Yay, this browser supports inline PDFs.\");\n    } else {\n       console.log(\"Boo, inline PDFs are not supported by this browser\");\n    }\n</script>\n</html>\n```\n\n### 方式七: PDF.js ([简单粗暴](../../../../2018/07/22/preview-pdf/))\nPDF.js可以实现在html下直接浏览pdf文档，是一款开源的pdf文档读取解析插件，非常强大，能将PDF文件渲染成Canvas。PDF.js主要包含两个库文件，一个pdf.js和一个pdf.worker.js，一个负责API解析，一个负责核心解析。\n\n## 2、word、xls、ppt文件在线预览功能\nword、ppt、xls文件实现在线预览的方式比较简单可以直接通过调用微软的在线预览功能实现 (预览前提：资源必须是公共可访问的)\n```html\n<iframe src='https://view.officeapps.live.com/op/view.aspx?src=http://storage.xuetangx.com/public_assets/xuetangx/PDF/1.xls' width='100%' height='100%' frameborder='1'>\n</iframe>\n/*src就是要实现预览的文件地址*/\n/*具体文档看这微软接口文档*/\n/*补充：google的文档在线预览实现同微软（资源必须是公共可访问的）*/\n<iframe :src=\"'https://docs.google.com/viewer?url=\"fileurl\"></iframe>\n```\n## 3、word文件\nXDOC可以实现预览以DataURI表示的DOC文档，此外XDOC还可以实现文本、带参数文本、html文本、json文本、公文等在线预览，具体实现方法请看官方文档下面这种方式可以实现快速预览word但是对文件使用的编辑器可能会有一些限制\n```html\n<a href=\"http://www.xdocin.com/xdoc?_func=to&amp;_format=html&amp;_cache=1&amp;_xdoc=http://www.xdocin.com/demo/demo.docx\" target=\"_blank\" rel=\"nofollow\">XDOC</a>\n```\n## 4、excel文件\n目前excel文件已经有了类似pdf.js那样的解析sheet.js\n## 总结\n1、免费纯前端方式实现在线预览word、excel、ppt最优选择微软在线预览（不可编辑）\n2、利用后端将文件转为图片，前端以图片形式预览（可行方案）\n3、购买在线预览服务例如百度DOC文档服务、永中、I DOC VIEW等\n\n[转载](https://juejin.im/post/5a7badf26fb9a063353198a1)","slug":"preview-file","published":1,"updated":"2018-09-12T08:37:21.000Z","_id":"cjlyv10e8000acbq3acarx6qs","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><h2 id=\"1、前端实现pdf文件在线预览功能\"><a href=\"#1、前端实现pdf文件在线预览功能\" class=\"headerlink\" title=\"1、前端实现pdf文件在线预览功能\"></a>1、前端实现pdf文件在线预览功能</h2><h3 id=\"方式一-通过a标签href属性实现\"><a href=\"#方式一-通过a标签href属性实现\" class=\"headerlink\" title=\"方式一: 通过a标签href属性实现\"></a>方式一: 通过a标签href属性实现</h3><p>pdf文件理论上可以在浏览器直接打开预览但是需要打开新页面。在仅仅是预览pdf文件且UI要求不高的情况下可以直接通过a标签href属性实现预览<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"文档地址\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方式二-通过jquery插件jquery-media-js实现\"><a href=\"#方式二-通过jquery插件jquery-media-js实现\" class=\"headerlink\" title=\"方式二: 通过jquery插件jquery.media.js实现\"></a>方式二: 通过jquery插件jquery.media.js实现</h3><p>这个插件可以实现pdf预览功能（包括其他各种媒体文件）但是对word等类型的文件无能为力。<br>实现方式：<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery-1.7.1.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.media.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">html结构：</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"handout_wrap_inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">调用方式：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\">  </span></span><br><span class=\"line\"><span class=\"javascript\"> $(<span class=\"string\">'#handout_wrap_inner'</span>).media(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\twidth: <span class=\"string\">'100%'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\theight: <span class=\"string\">'100%'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\tautoplay: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        src:<span class=\"string\">'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;); </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方式三-直接通过页面内嵌iframe\"><a href=\"#方式三-直接通过页面内嵌iframe\" class=\"headerlink\" title=\"方式三: 直接通过页面内嵌iframe\"></a>方式三: 直接通过页面内嵌iframe</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(\"<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">'\"+ this.previewUrl +\"'</span> <span class=\"attr\">width</span>=<span class=\"string\">'100%'</span> <span class=\"attr\">height</span>=<span class=\"string\">'362px'</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">'1'</span>&gt;</span>\").appendTo($(\".video-handouts-preview\"));</span><br><span class=\"line\">此外还可以在iframe标签之间提供一个提示类似这样</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"previewUrl\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">This browser does not support PDFs. Please download the PDF to view it: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"previewUrl\"</span>&gt;</span>Download PDF<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"方式四-通过标签嵌入内容\"><a href=\"#方式四-通过标签嵌入内容\" class=\"headerlink\" title=\"方式四: 通过标签嵌入内容\"></a>方式四: 通过标签嵌入内容</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"previewUrl\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/pdf\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span>&gt;</span></span><br><span class=\"line\">此标签h5特性中包含四个属性：高、宽、类型、预览文件src！</span><br><span class=\"line\">与<span class=\"tag\">&lt; <span class=\"attr\">iframe</span> &gt;</span> <span class=\"tag\">&lt; / <span class=\"attr\">iframe</span> &gt;</span> 不同，这个标签是自闭合的的，也就是说如果浏览器不支持PDF的嵌入，那么这个标签的内容什么都看不到！</span><br></pre></td></tr></table></figure><h3 id=\"方式五-标签和iframe使用差别较小\"><a href=\"#方式五-标签和iframe使用差别较小\" class=\"headerlink\" title=\"方式五: 标签和iframe使用差别较小\"></a>方式五: 标签和iframe使用差别较小</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"previewUrl\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">This browser does not support PDFs. Please download the PDF to view it: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"previewUrl\"</span>&gt;</span>Download PDF<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除方式二以外其他都是直接通过标签将内容引入页面实现预览</p><h3 id=\"方式六-PDFObject\"><a href=\"#方式六-PDFObject\" class=\"headerlink\" title=\"方式六: PDFObject\"></a>方式六: PDFObject</h3><p>PDFObject实际上也是通过标签实现的直接上代码<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Show PDF<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">'pdfobject.min.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>,<span class=\"selector-id\">#pdf_viewer</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pdf_viewer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>(PDFObject.supportsPDFs)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// PDF嵌入到网页</span></span></span><br><span class=\"line\"><span class=\"javascript\">        PDFObject.embed(<span class=\"string\">\"index.pdf\"</span>, <span class=\"string\">\"#pdf_viewer\"</span> );</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        location.href = <span class=\"string\">\"/canvas\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 还可以通过以下代码进行判断是否支持PDFObject预览</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>(PDFObject.supportsPDFs)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Yay, this browser supports inline PDFs.\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Boo, inline PDFs are not supported by this browser\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方式七-PDF-js-简单粗暴\"><a href=\"#方式七-PDF-js-简单粗暴\" class=\"headerlink\" title=\"方式七: PDF.js (简单粗暴)\"></a>方式七: PDF.js (<a href=\"../../../../2018/07/22/preview-pdf/\">简单粗暴</a>)</h3><p>PDF.js可以实现在html下直接浏览pdf文档，是一款开源的pdf文档读取解析插件，非常强大，能将PDF文件渲染成Canvas。PDF.js主要包含两个库文件，一个pdf.js和一个pdf.worker.js，一个负责API解析，一个负责核心解析。</p><h2 id=\"2、word、xls、ppt文件在线预览功能\"><a href=\"#2、word、xls、ppt文件在线预览功能\" class=\"headerlink\" title=\"2、word、xls、ppt文件在线预览功能\"></a>2、word、xls、ppt文件在线预览功能</h2><p>word、ppt、xls文件实现在线预览的方式比较简单可以直接通过调用微软的在线预览功能实现 (预览前提：资源必须是公共可访问的)<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">'https://view.officeapps.live.com/op/view.aspx?src=http://storage.xuetangx.com/public_assets/xuetangx/PDF/1.xls'</span> <span class=\"attr\">width</span>=<span class=\"string\">'100%'</span> <span class=\"attr\">height</span>=<span class=\"string\">'100%'</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">'1'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">/*src就是要实现预览的文件地址*/</span><br><span class=\"line\">/*具体文档看这微软接口文档*/</span><br><span class=\"line\">/*补充：google的文档在线预览实现同微软（资源必须是公共可访问的）*/</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"'https://docs.google.com/viewer?url=\"</span><span class=\"attr\">fileurl</span>\"&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"3、word文件\"><a href=\"#3、word文件\" class=\"headerlink\" title=\"3、word文件\"></a>3、word文件</h2><p>XDOC可以实现预览以DataURI表示的DOC文档，此外XDOC还可以实现文本、带参数文本、html文本、json文本、公文等在线预览，具体实现方法请看官方文档下面这种方式可以实现快速预览word但是对文件使用的编辑器可能会有一些限制<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.xdocin.com/xdoc?_func=to&amp;amp;_format=html&amp;amp;_cache=1&amp;amp;_xdoc=http://www.xdocin.com/demo/demo.docx\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"nofollow\"</span>&gt;</span>XDOC<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"4、excel文件\"><a href=\"#4、excel文件\" class=\"headerlink\" title=\"4、excel文件\"></a>4、excel文件</h2><p>目前excel文件已经有了类似pdf.js那样的解析sheet.js</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1、免费纯前端方式实现在线预览word、excel、ppt最优选择微软在线预览（不可编辑）<br>2、利用后端将文件转为图片，前端以图片形式预览（可行方案）<br>3、购买在线预览服务例如百度DOC文档服务、永中、I DOC VIEW等</p><p><a href=\"https://juejin.im/post/5a7badf26fb9a063353198a1\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">转载</a></p><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><h2 id=\"1、前端实现pdf文件在线预览功能\"><a href=\"#1、前端实现pdf文件在线预览功能\" class=\"headerlink\" title=\"1、前端实现pdf文件在线预览功能\"></a>1、前端实现pdf文件在线预览功能</h2><h3 id=\"方式一-通过a标签href属性实现\"><a href=\"#方式一-通过a标签href属性实现\" class=\"headerlink\" title=\"方式一: 通过a标签href属性实现\"></a>方式一: 通过a标签href属性实现</h3><p>pdf文件理论上可以在浏览器直接打开预览但是需要打开新页面。在仅仅是预览pdf文件且UI要求不高的情况下可以直接通过a标签href属性实现预览<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"文档地址\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方式二-通过jquery插件jquery-media-js实现\"><a href=\"#方式二-通过jquery插件jquery-media-js实现\" class=\"headerlink\" title=\"方式二: 通过jquery插件jquery.media.js实现\"></a>方式二: 通过jquery插件jquery.media.js实现</h3><p>这个插件可以实现pdf预览功能（包括其他各种媒体文件）但是对word等类型的文件无能为力。<br>实现方式：<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery-1.7.1.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.media.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">html结构：</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"handout_wrap_inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">调用方式：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\">  </span></span><br><span class=\"line\"><span class=\"javascript\"> $(<span class=\"string\">'#handout_wrap_inner'</span>).media(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\twidth: <span class=\"string\">'100%'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\theight: <span class=\"string\">'100%'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\tautoplay: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        src:<span class=\"string\">'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;); </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方式三-直接通过页面内嵌iframe\"><a href=\"#方式三-直接通过页面内嵌iframe\" class=\"headerlink\" title=\"方式三: 直接通过页面内嵌iframe\"></a>方式三: 直接通过页面内嵌iframe</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(\"<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">'\"+ this.previewUrl +\"'</span> <span class=\"attr\">width</span>=<span class=\"string\">'100%'</span> <span class=\"attr\">height</span>=<span class=\"string\">'362px'</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">'1'</span>&gt;</span>\").appendTo($(\".video-handouts-preview\"));</span><br><span class=\"line\">此外还可以在iframe标签之间提供一个提示类似这样</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"previewUrl\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">This browser does not support PDFs. Please download the PDF to view it: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"previewUrl\"</span>&gt;</span>Download PDF<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"方式四-通过标签嵌入内容\"><a href=\"#方式四-通过标签嵌入内容\" class=\"headerlink\" title=\"方式四: 通过标签嵌入内容\"></a>方式四: 通过标签嵌入内容</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"previewUrl\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/pdf\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span>&gt;</span></span><br><span class=\"line\">此标签h5特性中包含四个属性：高、宽、类型、预览文件src！</span><br><span class=\"line\">与<span class=\"tag\">&lt; <span class=\"attr\">iframe</span> &gt;</span> <span class=\"tag\">&lt; / <span class=\"attr\">iframe</span> &gt;</span> 不同，这个标签是自闭合的的，也就是说如果浏览器不支持PDF的嵌入，那么这个标签的内容什么都看不到！</span><br></pre></td></tr></table></figure><h3 id=\"方式五-标签和iframe使用差别较小\"><a href=\"#方式五-标签和iframe使用差别较小\" class=\"headerlink\" title=\"方式五: 标签和iframe使用差别较小\"></a>方式五: 标签和iframe使用差别较小</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"previewUrl\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">This browser does not support PDFs. Please download the PDF to view it: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"previewUrl\"</span>&gt;</span>Download PDF<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除方式二以外其他都是直接通过标签将内容引入页面实现预览</p><h3 id=\"方式六-PDFObject\"><a href=\"#方式六-PDFObject\" class=\"headerlink\" title=\"方式六: PDFObject\"></a>方式六: PDFObject</h3><p>PDFObject实际上也是通过标签实现的直接上代码<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Show PDF<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">'pdfobject.min.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>,<span class=\"selector-id\">#pdf_viewer</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pdf_viewer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>(PDFObject.supportsPDFs)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// PDF嵌入到网页</span></span></span><br><span class=\"line\"><span class=\"javascript\">        PDFObject.embed(<span class=\"string\">\"index.pdf\"</span>, <span class=\"string\">\"#pdf_viewer\"</span> );</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        location.href = <span class=\"string\">\"/canvas\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 还可以通过以下代码进行判断是否支持PDFObject预览</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>(PDFObject.supportsPDFs)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Yay, this browser supports inline PDFs.\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Boo, inline PDFs are not supported by this browser\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方式七-PDF-js-简单粗暴\"><a href=\"#方式七-PDF-js-简单粗暴\" class=\"headerlink\" title=\"方式七: PDF.js (简单粗暴)\"></a>方式七: PDF.js (<a href=\"../../../../2018/07/22/preview-pdf/\">简单粗暴</a>)</h3><p>PDF.js可以实现在html下直接浏览pdf文档，是一款开源的pdf文档读取解析插件，非常强大，能将PDF文件渲染成Canvas。PDF.js主要包含两个库文件，一个pdf.js和一个pdf.worker.js，一个负责API解析，一个负责核心解析。</p><h2 id=\"2、word、xls、ppt文件在线预览功能\"><a href=\"#2、word、xls、ppt文件在线预览功能\" class=\"headerlink\" title=\"2、word、xls、ppt文件在线预览功能\"></a>2、word、xls、ppt文件在线预览功能</h2><p>word、ppt、xls文件实现在线预览的方式比较简单可以直接通过调用微软的在线预览功能实现 (预览前提：资源必须是公共可访问的)<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">'https://view.officeapps.live.com/op/view.aspx?src=http://storage.xuetangx.com/public_assets/xuetangx/PDF/1.xls'</span> <span class=\"attr\">width</span>=<span class=\"string\">'100%'</span> <span class=\"attr\">height</span>=<span class=\"string\">'100%'</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">'1'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">/*src就是要实现预览的文件地址*/</span><br><span class=\"line\">/*具体文档看这微软接口文档*/</span><br><span class=\"line\">/*补充：google的文档在线预览实现同微软（资源必须是公共可访问的）*/</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"'https://docs.google.com/viewer?url=\"</span><span class=\"attr\">fileurl</span>\"&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"3、word文件\"><a href=\"#3、word文件\" class=\"headerlink\" title=\"3、word文件\"></a>3、word文件</h2><p>XDOC可以实现预览以DataURI表示的DOC文档，此外XDOC还可以实现文本、带参数文本、html文本、json文本、公文等在线预览，具体实现方法请看官方文档下面这种方式可以实现快速预览word但是对文件使用的编辑器可能会有一些限制<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.xdocin.com/xdoc?_func=to&amp;amp;_format=html&amp;amp;_cache=1&amp;amp;_xdoc=http://www.xdocin.com/demo/demo.docx\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"nofollow\"</span>&gt;</span>XDOC<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"4、excel文件\"><a href=\"#4、excel文件\" class=\"headerlink\" title=\"4、excel文件\"></a>4、excel文件</h2><p>目前excel文件已经有了类似pdf.js那样的解析sheet.js</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1、免费纯前端方式实现在线预览word、excel、ppt最优选择微软在线预览（不可编辑）<br>2、利用后端将文件转为图片，前端以图片形式预览（可行方案）<br>3、购买在线预览服务例如百度DOC文档服务、永中、I DOC VIEW等</p><p><a href=\"https://juejin.im/post/5a7badf26fb9a063353198a1\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">转载</a></p><!-- rebuild by neat -->"},{"title":"Canvas实现图片压缩上传","shared":false,"date":"2018-07-19T16:00:00.000Z","_content":"接到产品需求，问能不能将前端上传的图片压缩？像移动端上传图片，一般都是超清、高清图片，大小也有10M，甚至一张图片大小有15M左右，这样大的图片上传到腾讯云或者阿里云（没使用服务器上传图片）一方面上传速度慢，影响体验，另一方面体积太大占空间，图片压缩避免了，网上搜到了很多这方面介绍的[网址](https://www.cnblogs.com/stoneniqiu/p/5957356.html)，大多数都是用canvas来实现（不说了，马上开干）！。\n## 实现过程 (10M => 200k左右)\n\n### 1. 图片裁剪\n大体的思路是将图片抽样显示在canvas上，然后用通过`canvas.toDataURL`方法得到base64字符串来实现压缩。上代码！！！\n```js\n    const file: {} = e.target.files[0]; // 通过input元素触发的change事件\n    const reader = new FileReader(),\n    img = new Image();\n    // 缩放图片需要的canvas\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    reader.readAsDataURL(file);\n    // base64地址图片加载完毕后\n    img.onload = function () {\n      // 图片原始尺寸\n      const originWidth = this['width'];\n      const originHeight = this['height'];\n      // 最大尺寸限制\n      const maxWidth = 750, maxHeight = 400;\n      // 目标尺寸\n      let targetWidth = originWidth, targetHeight = originHeight;\n      // 图片尺寸超过750x400的限制\n      if (originWidth > maxWidth || originHeight > maxHeight) {\n        if (originWidth / originHeight > maxWidth / maxHeight) {\n          // 更宽，按照宽度限定尺寸\n          targetWidth = maxWidth;\n          targetHeight = Math.round(maxWidth * (originHeight / originWidth));\n        } else {\n          targetHeight = maxHeight;\n          targetWidth = Math.round(maxHeight * (originWidth / originHeight));\n        }\n      }\n\n      // canvas对图片进行缩放\n      canvas.width = targetWidth;\n      canvas.height = targetHeight;\n      // 清除画布\n      context.clearRect(0, 0, targetWidth, targetHeight);\n      // 图片压缩\n      context.drawImage(img, 0, 0, targetWidth, targetHeight);\n      // canvas转为blob并上传\n      // * 很多PC、手机浏览器不支持toBlob方法，如Safari*\n      // 不推荐使用toBlob方法\n      // canvas.toBlob(function($Blob) {\n      // })\n      const dataUrl = canvas.toDataURL('image/jpeg');\n      updateImgForBase64(dataUrl);\n    }\n    reader.onload = function (e) {\n        img.src = e.target['result'];\n    };\n```\n\n### 2. 上传到腾讯云\n项目中图片是保存在腾讯云中，这里就需要用到[腾讯JavaScript SDK](https://cloud.tencent.com/document/product/436/11459)，按照SDK文档去新建存储桶获取Bucket、Region，直接上代码：\n```js\nupdateImgForBase64(img: string, type: string = 'jpeg'): Promise<any> {\n    const vm = this;\n    const storeAs = `avatar/${new Date().getTime()}-${this.guid()}.${type}`;\n    const dataURLtoFile: Function = (dataurl, filename) => {\n      const arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1];\n      const bstr = atob(arr[1]);\n      let n = bstr.length;\n      const u8arr = new Uint8Array(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      return new File([u8arr], filename, {type: mime});\n    };\n    const file = dataURLtoFile(img, type);\n    \n    // function getBlobBydataURI(dataURI, type) {\n    //   var binary = atob(dataURI.split(',')[1]);\n    //   var array = [];\n    //   for (var i = 0; i < binary.length; i++) {\n    //     array.push(binary.charCodeAt(i));\n    //   }\n    //   return new Blob([new Uint8Array(array)], {type: type});\n    // }\n    //\n    // /**\n    //  * 上传  formData.append(\"files\", $Blob, storeAs);对iOS系统不支持\n    //  */\n    //   //base64 转 blob\n    // let $Blob = getBlobBydataURI(img, 'image/jpeg');\n    // let formData = new FormData();\n    // let storeAs = `documents/${new Date().getTime()}-${this.guid()}.${type}`;\n    // formData.append(\"files\", $Blob, storeAs);\n    //组建XMLHttpRequest 上传文件\n    return new Promise((resolve, reject) => {\n      this.cos.sliceUploadFile({\n        Bucket: 'your bucket',\n        Region: 'your region',\n        Key: storeAs,\n        Body: file\n      }, function (err, data) {\n        if (err) {\n          reject(JSON.stringify(err));\n        } else {\n          resolve(url);\n        }\n      });\n    })\n  }\n```","source":"_posts/图片压缩.md","raw":"---\ntitle: Canvas实现图片压缩上传\ntags:\n    - JS\ncategories:\n    - 前端\npermalink: compress-image\nshared: false\ndate: 2018-07-20\n---\n接到产品需求，问能不能将前端上传的图片压缩？像移动端上传图片，一般都是超清、高清图片，大小也有10M，甚至一张图片大小有15M左右，这样大的图片上传到腾讯云或者阿里云（没使用服务器上传图片）一方面上传速度慢，影响体验，另一方面体积太大占空间，图片压缩避免了，网上搜到了很多这方面介绍的[网址](https://www.cnblogs.com/stoneniqiu/p/5957356.html)，大多数都是用canvas来实现（不说了，马上开干）！。\n## 实现过程 (10M => 200k左右)\n\n### 1. 图片裁剪\n大体的思路是将图片抽样显示在canvas上，然后用通过`canvas.toDataURL`方法得到base64字符串来实现压缩。上代码！！！\n```js\n    const file: {} = e.target.files[0]; // 通过input元素触发的change事件\n    const reader = new FileReader(),\n    img = new Image();\n    // 缩放图片需要的canvas\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    reader.readAsDataURL(file);\n    // base64地址图片加载完毕后\n    img.onload = function () {\n      // 图片原始尺寸\n      const originWidth = this['width'];\n      const originHeight = this['height'];\n      // 最大尺寸限制\n      const maxWidth = 750, maxHeight = 400;\n      // 目标尺寸\n      let targetWidth = originWidth, targetHeight = originHeight;\n      // 图片尺寸超过750x400的限制\n      if (originWidth > maxWidth || originHeight > maxHeight) {\n        if (originWidth / originHeight > maxWidth / maxHeight) {\n          // 更宽，按照宽度限定尺寸\n          targetWidth = maxWidth;\n          targetHeight = Math.round(maxWidth * (originHeight / originWidth));\n        } else {\n          targetHeight = maxHeight;\n          targetWidth = Math.round(maxHeight * (originWidth / originHeight));\n        }\n      }\n\n      // canvas对图片进行缩放\n      canvas.width = targetWidth;\n      canvas.height = targetHeight;\n      // 清除画布\n      context.clearRect(0, 0, targetWidth, targetHeight);\n      // 图片压缩\n      context.drawImage(img, 0, 0, targetWidth, targetHeight);\n      // canvas转为blob并上传\n      // * 很多PC、手机浏览器不支持toBlob方法，如Safari*\n      // 不推荐使用toBlob方法\n      // canvas.toBlob(function($Blob) {\n      // })\n      const dataUrl = canvas.toDataURL('image/jpeg');\n      updateImgForBase64(dataUrl);\n    }\n    reader.onload = function (e) {\n        img.src = e.target['result'];\n    };\n```\n\n### 2. 上传到腾讯云\n项目中图片是保存在腾讯云中，这里就需要用到[腾讯JavaScript SDK](https://cloud.tencent.com/document/product/436/11459)，按照SDK文档去新建存储桶获取Bucket、Region，直接上代码：\n```js\nupdateImgForBase64(img: string, type: string = 'jpeg'): Promise<any> {\n    const vm = this;\n    const storeAs = `avatar/${new Date().getTime()}-${this.guid()}.${type}`;\n    const dataURLtoFile: Function = (dataurl, filename) => {\n      const arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1];\n      const bstr = atob(arr[1]);\n      let n = bstr.length;\n      const u8arr = new Uint8Array(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      return new File([u8arr], filename, {type: mime});\n    };\n    const file = dataURLtoFile(img, type);\n    \n    // function getBlobBydataURI(dataURI, type) {\n    //   var binary = atob(dataURI.split(',')[1]);\n    //   var array = [];\n    //   for (var i = 0; i < binary.length; i++) {\n    //     array.push(binary.charCodeAt(i));\n    //   }\n    //   return new Blob([new Uint8Array(array)], {type: type});\n    // }\n    //\n    // /**\n    //  * 上传  formData.append(\"files\", $Blob, storeAs);对iOS系统不支持\n    //  */\n    //   //base64 转 blob\n    // let $Blob = getBlobBydataURI(img, 'image/jpeg');\n    // let formData = new FormData();\n    // let storeAs = `documents/${new Date().getTime()}-${this.guid()}.${type}`;\n    // formData.append(\"files\", $Blob, storeAs);\n    //组建XMLHttpRequest 上传文件\n    return new Promise((resolve, reject) => {\n      this.cos.sliceUploadFile({\n        Bucket: 'your bucket',\n        Region: 'your region',\n        Key: storeAs,\n        Body: file\n      }, function (err, data) {\n        if (err) {\n          reject(JSON.stringify(err));\n        } else {\n          resolve(url);\n        }\n      });\n    })\n  }\n```","slug":"compress-image","published":1,"updated":"2018-09-12T08:14:03.000Z","_id":"cjlyv10ed000fcbq3wl6o59q4","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>接到产品需求，问能不能将前端上传的图片压缩？像移动端上传图片，一般都是超清、高清图片，大小也有10M，甚至一张图片大小有15M左右，这样大的图片上传到腾讯云或者阿里云（没使用服务器上传图片）一方面上传速度慢，影响体验，另一方面体积太大占空间，图片压缩避免了，网上搜到了很多这方面介绍的<a href=\"https://www.cnblogs.com/stoneniqiu/p/5957356.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">网址</a>，大多数都是用canvas来实现（不说了，马上开干）！。</p><h2 id=\"实现过程-10M-gt-200k左右\"><a href=\"#实现过程-10M-gt-200k左右\" class=\"headerlink\" title=\"实现过程 (10M =&gt; 200k左右)\"></a>实现过程 (10M =&gt; 200k左右)</h2><h3 id=\"1-图片裁剪\"><a href=\"#1-图片裁剪\" class=\"headerlink\" title=\"1. 图片裁剪\"></a>1. 图片裁剪</h3><p>大体的思路是将图片抽样显示在canvas上，然后用通过<code>canvas.toDataURL</code>方法得到base64字符串来实现压缩。上代码！！！<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> file: &#123;&#125; = e.target.files[<span class=\"number\">0</span>]; <span class=\"comment\">// 通过input元素触发的change事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader(),</span><br><span class=\"line\">img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 缩放图片需要的canvas</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">reader.readAsDataURL(file);</span><br><span class=\"line\"><span class=\"comment\">// base64地址图片加载完毕后</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 图片原始尺寸</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> originWidth = <span class=\"keyword\">this</span>[<span class=\"string\">'width'</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originHeight = <span class=\"keyword\">this</span>[<span class=\"string\">'height'</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 最大尺寸限制</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxWidth = <span class=\"number\">750</span>, maxHeight = <span class=\"number\">400</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 目标尺寸</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetWidth = originWidth, targetHeight = originHeight;</span><br><span class=\"line\">  <span class=\"comment\">// 图片尺寸超过750x400的限制</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (originWidth &gt; maxWidth || originHeight &gt; maxHeight) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更宽，按照宽度限定尺寸</span></span><br><span class=\"line\">      targetWidth = maxWidth;</span><br><span class=\"line\">      targetHeight = <span class=\"built_in\">Math</span>.round(maxWidth * (originHeight / originWidth));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      targetHeight = maxHeight;</span><br><span class=\"line\">      targetWidth = <span class=\"built_in\">Math</span>.round(maxHeight * (originWidth / originHeight));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// canvas对图片进行缩放</span></span><br><span class=\"line\">  canvas.width = targetWidth;</span><br><span class=\"line\">  canvas.height = targetHeight;</span><br><span class=\"line\">  <span class=\"comment\">// 清除画布</span></span><br><span class=\"line\">  context.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, targetWidth, targetHeight);</span><br><span class=\"line\">  <span class=\"comment\">// 图片压缩</span></span><br><span class=\"line\">  context.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, targetWidth, targetHeight);</span><br><span class=\"line\">  <span class=\"comment\">// canvas转为blob并上传</span></span><br><span class=\"line\">  <span class=\"comment\">// * 很多PC、手机浏览器不支持toBlob方法，如Safari*</span></span><br><span class=\"line\">  <span class=\"comment\">// 不推荐使用toBlob方法</span></span><br><span class=\"line\">  <span class=\"comment\">// canvas.toBlob(function($Blob) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dataUrl = canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>);</span><br><span class=\"line\">  updateImgForBase64(dataUrl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    img.src = e.target[<span class=\"string\">'result'</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"2-上传到腾讯云\"><a href=\"#2-上传到腾讯云\" class=\"headerlink\" title=\"2. 上传到腾讯云\"></a>2. 上传到腾讯云</h3><p>项目中图片是保存在腾讯云中，这里就需要用到<a href=\"https://cloud.tencent.com/document/product/436/11459\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">腾讯JavaScript SDK</a>，按照SDK文档去新建存储桶获取Bucket、Region，直接上代码：<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">updateImgForBase64(img: string, <span class=\"attr\">type</span>: string = <span class=\"string\">'jpeg'</span>): <span class=\"built_in\">Promise</span>&lt;any&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> storeAs = <span class=\"string\">`avatar/<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()&#125;</span>-<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.guid()&#125;</span>.<span class=\"subst\">$&#123;type&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dataURLtoFile: <span class=\"built_in\">Function</span> = <span class=\"function\">(<span class=\"params\">dataurl, filename</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr = dataurl.split(<span class=\"string\">','</span>), mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> bstr = atob(arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> n = bstr.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File([u8arr], filename, &#123;<span class=\"attr\">type</span>: mime&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = dataURLtoFile(img, type);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// function getBlobBydataURI(dataURI, type) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   var binary = atob(dataURI.split(',')[1]);</span></span><br><span class=\"line\">    <span class=\"comment\">//   var array = [];</span></span><br><span class=\"line\">    <span class=\"comment\">//   for (var i = 0; i &lt; binary.length; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     array.push(binary.charCodeAt(i));</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//   return new Blob([new Uint8Array(array)], &#123;type: type&#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// /**</span></span><br><span class=\"line\">    <span class=\"comment\">//  * 上传  formData.append(\"files\", $Blob, storeAs);对iOS系统不支持</span></span><br><span class=\"line\">    <span class=\"comment\">//  */</span></span><br><span class=\"line\">    <span class=\"comment\">//   //base64 转 blob</span></span><br><span class=\"line\">    <span class=\"comment\">// let $Blob = getBlobBydataURI(img, 'image/jpeg');</span></span><br><span class=\"line\">    <span class=\"comment\">// let formData = new FormData();</span></span><br><span class=\"line\">    <span class=\"comment\">// let storeAs = `documents/$&#123;new Date().getTime()&#125;-$&#123;this.guid()&#125;.$&#123;type&#125;`;</span></span><br><span class=\"line\">    <span class=\"comment\">// formData.append(\"files\", $Blob, storeAs);</span></span><br><span class=\"line\">    <span class=\"comment\">//组建XMLHttpRequest 上传文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cos.sliceUploadFile(&#123;</span><br><span class=\"line\">        Bucket: <span class=\"string\">'your bucket'</span>,</span><br><span class=\"line\">        Region: <span class=\"string\">'your region'</span>,</span><br><span class=\"line\">        Key: storeAs,</span><br><span class=\"line\">        Body: file</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          reject(<span class=\"built_in\">JSON</span>.stringify(err));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 17:36:35 GMT+0800 (CST) --><p>接到产品需求，问能不能将前端上传的图片压缩？像移动端上传图片，一般都是超清、高清图片，大小也有10M，甚至一张图片大小有15M左右，这样大的图片上传到腾讯云或者阿里云（没使用服务器上传图片）一方面上传速度慢，影响体验，另一方面体积太大占空间，图片压缩避免了，网上搜到了很多这方面介绍的<a href=\"https://www.cnblogs.com/stoneniqiu/p/5957356.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">网址</a>，大多数都是用canvas来实现（不说了，马上开干）！。</p><h2 id=\"实现过程-10M-gt-200k左右\"><a href=\"#实现过程-10M-gt-200k左右\" class=\"headerlink\" title=\"实现过程 (10M =&gt; 200k左右)\"></a>实现过程 (10M =&gt; 200k左右)</h2><h3 id=\"1-图片裁剪\"><a href=\"#1-图片裁剪\" class=\"headerlink\" title=\"1. 图片裁剪\"></a>1. 图片裁剪</h3><p>大体的思路是将图片抽样显示在canvas上，然后用通过<code>canvas.toDataURL</code>方法得到base64字符串来实现压缩。上代码！！！<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> file: &#123;&#125; = e.target.files[<span class=\"number\">0</span>]; <span class=\"comment\">// 通过input元素触发的change事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader(),</span><br><span class=\"line\">img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 缩放图片需要的canvas</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">reader.readAsDataURL(file);</span><br><span class=\"line\"><span class=\"comment\">// base64地址图片加载完毕后</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 图片原始尺寸</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> originWidth = <span class=\"keyword\">this</span>[<span class=\"string\">'width'</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originHeight = <span class=\"keyword\">this</span>[<span class=\"string\">'height'</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 最大尺寸限制</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxWidth = <span class=\"number\">750</span>, maxHeight = <span class=\"number\">400</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 目标尺寸</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetWidth = originWidth, targetHeight = originHeight;</span><br><span class=\"line\">  <span class=\"comment\">// 图片尺寸超过750x400的限制</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (originWidth &gt; maxWidth || originHeight &gt; maxHeight) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更宽，按照宽度限定尺寸</span></span><br><span class=\"line\">      targetWidth = maxWidth;</span><br><span class=\"line\">      targetHeight = <span class=\"built_in\">Math</span>.round(maxWidth * (originHeight / originWidth));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      targetHeight = maxHeight;</span><br><span class=\"line\">      targetWidth = <span class=\"built_in\">Math</span>.round(maxHeight * (originWidth / originHeight));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// canvas对图片进行缩放</span></span><br><span class=\"line\">  canvas.width = targetWidth;</span><br><span class=\"line\">  canvas.height = targetHeight;</span><br><span class=\"line\">  <span class=\"comment\">// 清除画布</span></span><br><span class=\"line\">  context.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, targetWidth, targetHeight);</span><br><span class=\"line\">  <span class=\"comment\">// 图片压缩</span></span><br><span class=\"line\">  context.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, targetWidth, targetHeight);</span><br><span class=\"line\">  <span class=\"comment\">// canvas转为blob并上传</span></span><br><span class=\"line\">  <span class=\"comment\">// * 很多PC、手机浏览器不支持toBlob方法，如Safari*</span></span><br><span class=\"line\">  <span class=\"comment\">// 不推荐使用toBlob方法</span></span><br><span class=\"line\">  <span class=\"comment\">// canvas.toBlob(function($Blob) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dataUrl = canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>);</span><br><span class=\"line\">  updateImgForBase64(dataUrl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    img.src = e.target[<span class=\"string\">'result'</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"2-上传到腾讯云\"><a href=\"#2-上传到腾讯云\" class=\"headerlink\" title=\"2. 上传到腾讯云\"></a>2. 上传到腾讯云</h3><p>项目中图片是保存在腾讯云中，这里就需要用到<a href=\"https://cloud.tencent.com/document/product/436/11459\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">腾讯JavaScript SDK</a>，按照SDK文档去新建存储桶获取Bucket、Region，直接上代码：<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">updateImgForBase64(img: string, <span class=\"attr\">type</span>: string = <span class=\"string\">'jpeg'</span>): <span class=\"built_in\">Promise</span>&lt;any&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> storeAs = <span class=\"string\">`avatar/<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()&#125;</span>-<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.guid()&#125;</span>.<span class=\"subst\">$&#123;type&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dataURLtoFile: <span class=\"built_in\">Function</span> = <span class=\"function\">(<span class=\"params\">dataurl, filename</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr = dataurl.split(<span class=\"string\">','</span>), mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> bstr = atob(arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> n = bstr.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File([u8arr], filename, &#123;<span class=\"attr\">type</span>: mime&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = dataURLtoFile(img, type);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// function getBlobBydataURI(dataURI, type) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   var binary = atob(dataURI.split(',')[1]);</span></span><br><span class=\"line\">    <span class=\"comment\">//   var array = [];</span></span><br><span class=\"line\">    <span class=\"comment\">//   for (var i = 0; i &lt; binary.length; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     array.push(binary.charCodeAt(i));</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//   return new Blob([new Uint8Array(array)], &#123;type: type&#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// /**</span></span><br><span class=\"line\">    <span class=\"comment\">//  * 上传  formData.append(\"files\", $Blob, storeAs);对iOS系统不支持</span></span><br><span class=\"line\">    <span class=\"comment\">//  */</span></span><br><span class=\"line\">    <span class=\"comment\">//   //base64 转 blob</span></span><br><span class=\"line\">    <span class=\"comment\">// let $Blob = getBlobBydataURI(img, 'image/jpeg');</span></span><br><span class=\"line\">    <span class=\"comment\">// let formData = new FormData();</span></span><br><span class=\"line\">    <span class=\"comment\">// let storeAs = `documents/$&#123;new Date().getTime()&#125;-$&#123;this.guid()&#125;.$&#123;type&#125;`;</span></span><br><span class=\"line\">    <span class=\"comment\">// formData.append(\"files\", $Blob, storeAs);</span></span><br><span class=\"line\">    <span class=\"comment\">//组建XMLHttpRequest 上传文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cos.sliceUploadFile(&#123;</span><br><span class=\"line\">        Bucket: <span class=\"string\">'your bucket'</span>,</span><br><span class=\"line\">        Region: <span class=\"string\">'your region'</span>,</span><br><span class=\"line\">        Key: storeAs,</span><br><span class=\"line\">        Body: file</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          reject(<span class=\"built_in\">JSON</span>.stringify(err));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"PDF.js预览文件","shared":false,"date":"2018-07-21T16:00:00.000Z","_content":"网上找到很多前端实现文件预览方法，但都无法解决我的问题，产品需求中将文件上传到腾讯云的对象存储，返回一个URL，这个URL无法在网页中预览，浏览器将这个URL直接本地下载文件（下载文件下面说）,最后只能用PDF.js，这是一个开源的js库，直接将PDF文件渲染成canvas，PDF.js框架的魅力所在，为其为HTML5实现的，无需任何本地支持，而且对浏览器的兼容性也是比较好，要求只有一个：浏览器支持HTML5就好了！（不过对于低版本的IE，就只能节哀了！）.不多说，直接贴代码(angular5.0开发):\n\n在线演示地址：http://mozilla.github.com/pdf.js/web/viewer.html\n\nDemo地址：http://mozilla.github.io/pdf.js/examples/\n\nPDF.js可在官网下载  地址：http://mozilla.github.io/pdf.js/\n\n\n#### 方案一<strong style=\"color: red\">(需要翻墙)</strong>：\n\n```html\n  <canvas id=\"the-canvas\" class=\"the-canvas\" style=\"position: absolute;\n    left: 0;\n    right: 0;\n    margin: auto;\"></canvas>\n  <div class=\"m-t\" style=\"position: fixed;\n    right: 40px;\">\n    <button id=\"prev\" nz-button class=\"m-r-md\"><i class=\"anticon anticon-left\"></i>Previous</button>\n    <span class=\"m-r-md\">Page: <span id=\"page_num\"></span> / <span id=\"page_count\"></span></span>\n    <button id=\"next\" nz-button>Next<i class=\"anticon anticon-right\"></i></button>\n  </div>\n\n```\n通过按钮控制页面加载\n```js\n previewPDF(url) {\n    // url 为PDF文件的链接地址;\n    const vm = this;\n    const pdfjsLib = window['pdfjs-dist/build/pdf'];\n    pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';\n\n    let pdfDoc = null,\n      pageNum = 1,\n      pageRendering = false,\n      pageNumPending = null,\n      scale = 1.6,\n      canvas = vm.el.nativeElement.querySelector('.the-canvas'),\n      ctx = canvas['getContext']('2d');\n\n    function renderPage(num) {\n      pageRendering = true;\n      pdfDoc.getPage(num).then(function (page) {\n        const viewport = page.getViewport(scale);\n        canvas['height'] = viewport.height;\n        canvas['width'] = viewport.width;\n\n        const renderContext = {\n          canvasContext: ctx,\n          viewport: viewport\n        };\n        const renderTask = page.render(renderContext);\n\n        renderTask.promise.then(function () {\n          pageRendering = false;\n          if (pageNumPending !== null) {\n            renderPage(pageNumPending);\n            pageNumPending = null;\n          }\n        });\n      });\n      vm.el.nativeElement.querySelector('#page_num').textContent = num;\n    }\n\n    function queueRenderPage(num) {\n      if (pageRendering) {\n        pageNumPending = num;\n      } else {\n        renderPage(num);\n      }\n    }\n\n    function onPrevPage() {\n      if (pageNum <= 1) {\n        return;\n      }\n      pageNum--;\n      queueRenderPage(pageNum);\n    }\n\n    vm.el.nativeElement.querySelector('#prev').addEventListener('click', onPrevPage);\n\n    function onNextPage() {\n      if (pageNum >= pdfDoc.numPages) {\n        return;\n      }\n      pageNum++;\n      queueRenderPage(pageNum);\n    }\n\n    vm.el.nativeElement.querySelector('#next').addEventListener('click', onNextPage);\n\n    pdfjsLib.getDocument(url).then(function (pdfDoc_) {\n      pdfDoc = pdfDoc_;\n      vm.el.nativeElement.querySelector('#page_count').textContent = pdfDoc.numPages;\n      renderPage(pageNum);\n    });\n  }\n```\n结果如下图:\n\n![](/images/pdf.jpg)\n\n<br/>\nwhat!，页面太丑了……与官方的预览页面相比的确有那么一丢丢不满意，没事，下面来说使用本地预览PDF，与官方页面一样哦~~\n\n预览一存在一个问题：<strong style=\"color: red\">访问网络需要支持翻墙</strong>（啥！还要翻墙，糗~~）。项目上线后大量用户反映无法预览PDF，归根结底就是许多用户根本没有翻墙，被老板狠批一顿，啪啪打脸！！！既然不满足需求，改呗！代码如下：\n\n#### 方案二<strong style=\"color: red\">(不需要翻墙)</strong>：\n\n方案二是不需要访问线上资源，本地渲染PDF展示。下载源码: https://github.com/lishaoh/PDF.js\n\n##### step1:\n\n将源码加入到项目中，目录如下：\n\n![](/images/pdf0.jpg)\n    \n在web目录下有viewer.js文件\n \n![](/images/pdf1.jpg)\n\n##### step2:\n\n在viewer.js 里面做如下修改：\n\n```js\nvar DEFAULT_URL = ''; // 将默认PDF路径路径置为空\n```\n##### step3:\n\n在按钮点击事件中调用window.open()\n\n```html\n<!DOCTYPE html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=referrer content=never>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\">\n    <meta name=\"renderer\" content=\"webkit\">\n</head>\n<body>\n<button onclick=\"preview()\">PDF预览</button>\n</body>\n<script>\n    function preview() {\n        console.log('test');\n        var pdf = 'pdf的URL';\n        window.open('./js/pdf/web/viewer.html?file=' + pdf, 'PDF');\n    }\n</script>\n</html>\n```\n\n至此OK了，老板再也不用当心用户没有翻墙了~~~\n\n截图如下：\n\n![](/images/pdf3.jpg)","source":"_posts/预览PDF文件.md","raw":"---\ntitle: PDF.js预览文件\ntags:\n    - JS\ncategories:\n    - 前端\npermalink: preview-pdf\nshared: false\ndate: 2018-07-22\n---\n网上找到很多前端实现文件预览方法，但都无法解决我的问题，产品需求中将文件上传到腾讯云的对象存储，返回一个URL，这个URL无法在网页中预览，浏览器将这个URL直接本地下载文件（下载文件下面说）,最后只能用PDF.js，这是一个开源的js库，直接将PDF文件渲染成canvas，PDF.js框架的魅力所在，为其为HTML5实现的，无需任何本地支持，而且对浏览器的兼容性也是比较好，要求只有一个：浏览器支持HTML5就好了！（不过对于低版本的IE，就只能节哀了！）.不多说，直接贴代码(angular5.0开发):\n\n在线演示地址：http://mozilla.github.com/pdf.js/web/viewer.html\n\nDemo地址：http://mozilla.github.io/pdf.js/examples/\n\nPDF.js可在官网下载  地址：http://mozilla.github.io/pdf.js/\n\n\n#### 方案一<strong style=\"color: red\">(需要翻墙)</strong>：\n\n```html\n  <canvas id=\"the-canvas\" class=\"the-canvas\" style=\"position: absolute;\n    left: 0;\n    right: 0;\n    margin: auto;\"></canvas>\n  <div class=\"m-t\" style=\"position: fixed;\n    right: 40px;\">\n    <button id=\"prev\" nz-button class=\"m-r-md\"><i class=\"anticon anticon-left\"></i>Previous</button>\n    <span class=\"m-r-md\">Page: <span id=\"page_num\"></span> / <span id=\"page_count\"></span></span>\n    <button id=\"next\" nz-button>Next<i class=\"anticon anticon-right\"></i></button>\n  </div>\n\n```\n通过按钮控制页面加载\n```js\n previewPDF(url) {\n    // url 为PDF文件的链接地址;\n    const vm = this;\n    const pdfjsLib = window['pdfjs-dist/build/pdf'];\n    pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';\n\n    let pdfDoc = null,\n      pageNum = 1,\n      pageRendering = false,\n      pageNumPending = null,\n      scale = 1.6,\n      canvas = vm.el.nativeElement.querySelector('.the-canvas'),\n      ctx = canvas['getContext']('2d');\n\n    function renderPage(num) {\n      pageRendering = true;\n      pdfDoc.getPage(num).then(function (page) {\n        const viewport = page.getViewport(scale);\n        canvas['height'] = viewport.height;\n        canvas['width'] = viewport.width;\n\n        const renderContext = {\n          canvasContext: ctx,\n          viewport: viewport\n        };\n        const renderTask = page.render(renderContext);\n\n        renderTask.promise.then(function () {\n          pageRendering = false;\n          if (pageNumPending !== null) {\n            renderPage(pageNumPending);\n            pageNumPending = null;\n          }\n        });\n      });\n      vm.el.nativeElement.querySelector('#page_num').textContent = num;\n    }\n\n    function queueRenderPage(num) {\n      if (pageRendering) {\n        pageNumPending = num;\n      } else {\n        renderPage(num);\n      }\n    }\n\n    function onPrevPage() {\n      if (pageNum <= 1) {\n        return;\n      }\n      pageNum--;\n      queueRenderPage(pageNum);\n    }\n\n    vm.el.nativeElement.querySelector('#prev').addEventListener('click', onPrevPage);\n\n    function onNextPage() {\n      if (pageNum >= pdfDoc.numPages) {\n        return;\n      }\n      pageNum++;\n      queueRenderPage(pageNum);\n    }\n\n    vm.el.nativeElement.querySelector('#next').addEventListener('click', onNextPage);\n\n    pdfjsLib.getDocument(url).then(function (pdfDoc_) {\n      pdfDoc = pdfDoc_;\n      vm.el.nativeElement.querySelector('#page_count').textContent = pdfDoc.numPages;\n      renderPage(pageNum);\n    });\n  }\n```\n结果如下图:\n\n![](/images/pdf.jpg)\n\n<br/>\nwhat!，页面太丑了……与官方的预览页面相比的确有那么一丢丢不满意，没事，下面来说使用本地预览PDF，与官方页面一样哦~~\n\n预览一存在一个问题：<strong style=\"color: red\">访问网络需要支持翻墙</strong>（啥！还要翻墙，糗~~）。项目上线后大量用户反映无法预览PDF，归根结底就是许多用户根本没有翻墙，被老板狠批一顿，啪啪打脸！！！既然不满足需求，改呗！代码如下：\n\n#### 方案二<strong style=\"color: red\">(不需要翻墙)</strong>：\n\n方案二是不需要访问线上资源，本地渲染PDF展示。下载源码: https://github.com/lishaoh/PDF.js\n\n##### step1:\n\n将源码加入到项目中，目录如下：\n\n![](/images/pdf0.jpg)\n    \n在web目录下有viewer.js文件\n \n![](/images/pdf1.jpg)\n\n##### step2:\n\n在viewer.js 里面做如下修改：\n\n```js\nvar DEFAULT_URL = ''; // 将默认PDF路径路径置为空\n```\n##### step3:\n\n在按钮点击事件中调用window.open()\n\n```html\n<!DOCTYPE html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=referrer content=never>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\">\n    <meta name=\"renderer\" content=\"webkit\">\n</head>\n<body>\n<button onclick=\"preview()\">PDF预览</button>\n</body>\n<script>\n    function preview() {\n        console.log('test');\n        var pdf = 'pdf的URL';\n        window.open('./js/pdf/web/viewer.html?file=' + pdf, 'PDF');\n    }\n</script>\n</html>\n```\n\n至此OK了，老板再也不用当心用户没有翻墙了~~~\n\n截图如下：\n\n![](/images/pdf3.jpg)","slug":"preview-pdf","published":1,"updated":"2018-09-12T09:46:42.000Z","_id":"cjlyv10eh000hcbq30p6rvzvr","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Sep 12 2018 17:47:34 GMT+0800 (CST) --><p>网上找到很多前端实现文件预览方法，但都无法解决我的问题，产品需求中将文件上传到腾讯云的对象存储，返回一个URL，这个URL无法在网页中预览，浏览器将这个URL直接本地下载文件（下载文件下面说）,最后只能用PDF.js，这是一个开源的js库，直接将PDF文件渲染成canvas，PDF.js框架的魅力所在，为其为HTML5实现的，无需任何本地支持，而且对浏览器的兼容性也是比较好，要求只有一个：浏览器支持HTML5就好了！（不过对于低版本的IE，就只能节哀了！）.不多说，直接贴代码(angular5.0开发):</p><p>在线演示地址：<a href=\"http://mozilla.github.com/pdf.js/web/viewer.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mozilla.github.com/pdf.js/web/viewer.html</a></p><p>Demo地址：<a href=\"http://mozilla.github.io/pdf.js/examples/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mozilla.github.io/pdf.js/examples/</a></p><p>PDF.js可在官网下载 地址：<a href=\"http://mozilla.github.io/pdf.js/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mozilla.github.io/pdf.js/</a></p><h4 id=\"方案一-需要翻墙-：\"><a href=\"#方案一-需要翻墙-：\" class=\"headerlink\" title=\"方案一(需要翻墙)：\"></a>方案一<strong style=\"color:red\">(需要翻墙)</strong>：</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"the-canvas\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"the-canvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  margin: auto;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-t\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: fixed;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  right: 40px;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"prev\"</span> <span class=\"attr\">nz-button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-r-md\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"anticon anticon-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>Previous<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-r-md\"</span>&gt;</span>Page: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_num\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> / <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">nz-button</span>&gt;</span>Next<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"anticon anticon-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过按钮控制页面加载<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">previewPDF(url) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// url 为PDF文件的链接地址;</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> pdfjsLib = <span class=\"built_in\">window</span>[<span class=\"string\">'pdfjs-dist/build/pdf'</span>];</span><br><span class=\"line\">   pdfjsLib.GlobalWorkerOptions.workerSrc = <span class=\"string\">'//mozilla.github.io/pdf.js/build/pdf.worker.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> pdfDoc = <span class=\"literal\">null</span>,</span><br><span class=\"line\">     pageNum = <span class=\"number\">1</span>,</span><br><span class=\"line\">     pageRendering = <span class=\"literal\">false</span>,</span><br><span class=\"line\">     pageNumPending = <span class=\"literal\">null</span>,</span><br><span class=\"line\">     scale = <span class=\"number\">1.6</span>,</span><br><span class=\"line\">     canvas = vm.el.nativeElement.querySelector(<span class=\"string\">'.the-canvas'</span>),</span><br><span class=\"line\">     ctx = canvas[<span class=\"string\">'getContext'</span>](<span class=\"string\">'2d'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderPage</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">     pageRendering = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     pdfDoc.getPage(num).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> viewport = page.getViewport(scale);</span><br><span class=\"line\">       canvas[<span class=\"string\">'height'</span>] = viewport.height;</span><br><span class=\"line\">       canvas[<span class=\"string\">'width'</span>] = viewport.width;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">const</span> renderContext = &#123;</span><br><span class=\"line\">         canvasContext: ctx,</span><br><span class=\"line\">         viewport: viewport</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> renderTask = page.render(renderContext);</span><br><span class=\"line\"></span><br><span class=\"line\">       renderTask.promise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         pageRendering = <span class=\"literal\">false</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (pageNumPending !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           renderPage(pageNumPending);</span><br><span class=\"line\">           pageNumPending = <span class=\"literal\">null</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">     vm.el.nativeElement.querySelector(<span class=\"string\">'#page_num'</span>).textContent = num;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueRenderPage</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pageRendering) &#123;</span><br><span class=\"line\">       pageNumPending = num;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       renderPage(num);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPrevPage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pageNum &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     pageNum--;</span><br><span class=\"line\">     queueRenderPage(pageNum);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   vm.el.nativeElement.querySelector(<span class=\"string\">'#prev'</span>).addEventListener(<span class=\"string\">'click'</span>, onPrevPage);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onNextPage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pageNum &gt;= pdfDoc.numPages) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     pageNum++;</span><br><span class=\"line\">     queueRenderPage(pageNum);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   vm.el.nativeElement.querySelector(<span class=\"string\">'#next'</span>).addEventListener(<span class=\"string\">'click'</span>, onNextPage);</span><br><span class=\"line\"></span><br><span class=\"line\">   pdfjsLib.getDocument(url).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pdfDoc_</span>) </span>&#123;</span><br><span class=\"line\">     pdfDoc = pdfDoc_;</span><br><span class=\"line\">     vm.el.nativeElement.querySelector(<span class=\"string\">'#page_count'</span>).textContent = pdfDoc.numPages;</span><br><span class=\"line\">     renderPage(pageNum);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p></p><p>结果如下图:</p><p><img src=\"/images/pdf.jpg\" alt=\"\"></p><p><br><br>what!，页面太丑了……与官方的预览页面相比的确有那么一丢丢不满意，没事，下面来说使用本地预览PDF，与官方页面一样哦~~</p><p>预览一存在一个问题：<strong style=\"color:red\">访问网络需要支持翻墙</strong>（啥！还要翻墙，糗~~）。项目上线后大量用户反映无法预览PDF，归根结底就是许多用户根本没有翻墙，被老板狠批一顿，啪啪打脸！！！既然不满足需求，改呗！代码如下：</p><h4 id=\"方案二-不需要翻墙-：\"><a href=\"#方案二-不需要翻墙-：\" class=\"headerlink\" title=\"方案二(不需要翻墙)：\"></a>方案二<strong style=\"color:red\">(不需要翻墙)</strong>：</h4><p>方案二是不需要访问线上资源，本地渲染PDF展示。下载源码: <a href=\"https://github.com/lishaoh/PDF.js\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://github.com/lishaoh/PDF.js</a></p><h5 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1:\"></a>step1:</h5><p>将源码加入到项目中，目录如下：</p><p><img src=\"/images/pdf0.jpg\" alt=\"\"></p><p>在web目录下有viewer.js文件</p><p><img src=\"/images/pdf1.jpg\" alt=\"\"></p><h5 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2:\"></a>step2:</h5><p>在viewer.js 里面做如下修改：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DEFAULT_URL = <span class=\"string\">''</span>; <span class=\"comment\">// 将默认PDF路径路径置为空</span></span><br></pre></td></tr></table></figure><h5 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3:\"></a>step3:</h5><p>在按钮点击事件中调用window.open()</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">referrer</span> <span class=\"attr\">content</span>=<span class=\"string\">never</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"preview()\"</span>&gt;</span>PDF预览<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preview</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> pdf = <span class=\"string\">'pdf的URL'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.open(<span class=\"string\">'./js/pdf/web/viewer.html?file='</span> + pdf, <span class=\"string\">'PDF'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此OK了，老板再也不用当心用户没有翻墙了~~~</p><p>截图如下：</p><p><img src=\"/images/pdf3.jpg\" alt=\"\"></p><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Wed Sep 12 2018 17:47:34 GMT+0800 (CST) --><p>网上找到很多前端实现文件预览方法，但都无法解决我的问题，产品需求中将文件上传到腾讯云的对象存储，返回一个URL，这个URL无法在网页中预览，浏览器将这个URL直接本地下载文件（下载文件下面说）,最后只能用PDF.js，这是一个开源的js库，直接将PDF文件渲染成canvas，PDF.js框架的魅力所在，为其为HTML5实现的，无需任何本地支持，而且对浏览器的兼容性也是比较好，要求只有一个：浏览器支持HTML5就好了！（不过对于低版本的IE，就只能节哀了！）.不多说，直接贴代码(angular5.0开发):</p><p>在线演示地址：<a href=\"http://mozilla.github.com/pdf.js/web/viewer.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mozilla.github.com/pdf.js/web/viewer.html</a></p><p>Demo地址：<a href=\"http://mozilla.github.io/pdf.js/examples/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mozilla.github.io/pdf.js/examples/</a></p><p>PDF.js可在官网下载 地址：<a href=\"http://mozilla.github.io/pdf.js/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mozilla.github.io/pdf.js/</a></p><h4 id=\"方案一-需要翻墙-：\"><a href=\"#方案一-需要翻墙-：\" class=\"headerlink\" title=\"方案一(需要翻墙)：\"></a>方案一<strong style=\"color:red\">(需要翻墙)</strong>：</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"the-canvas\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"the-canvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  margin: auto;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-t\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: fixed;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  right: 40px;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"prev\"</span> <span class=\"attr\">nz-button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-r-md\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"anticon anticon-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>Previous<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-r-md\"</span>&gt;</span>Page: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_num\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> / <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">nz-button</span>&gt;</span>Next<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"anticon anticon-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过按钮控制页面加载<br></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">previewPDF(url) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// url 为PDF文件的链接地址;</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> pdfjsLib = <span class=\"built_in\">window</span>[<span class=\"string\">'pdfjs-dist/build/pdf'</span>];</span><br><span class=\"line\">   pdfjsLib.GlobalWorkerOptions.workerSrc = <span class=\"string\">'//mozilla.github.io/pdf.js/build/pdf.worker.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> pdfDoc = <span class=\"literal\">null</span>,</span><br><span class=\"line\">     pageNum = <span class=\"number\">1</span>,</span><br><span class=\"line\">     pageRendering = <span class=\"literal\">false</span>,</span><br><span class=\"line\">     pageNumPending = <span class=\"literal\">null</span>,</span><br><span class=\"line\">     scale = <span class=\"number\">1.6</span>,</span><br><span class=\"line\">     canvas = vm.el.nativeElement.querySelector(<span class=\"string\">'.the-canvas'</span>),</span><br><span class=\"line\">     ctx = canvas[<span class=\"string\">'getContext'</span>](<span class=\"string\">'2d'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderPage</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">     pageRendering = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     pdfDoc.getPage(num).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> viewport = page.getViewport(scale);</span><br><span class=\"line\">       canvas[<span class=\"string\">'height'</span>] = viewport.height;</span><br><span class=\"line\">       canvas[<span class=\"string\">'width'</span>] = viewport.width;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">const</span> renderContext = &#123;</span><br><span class=\"line\">         canvasContext: ctx,</span><br><span class=\"line\">         viewport: viewport</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> renderTask = page.render(renderContext);</span><br><span class=\"line\"></span><br><span class=\"line\">       renderTask.promise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         pageRendering = <span class=\"literal\">false</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (pageNumPending !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           renderPage(pageNumPending);</span><br><span class=\"line\">           pageNumPending = <span class=\"literal\">null</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">     vm.el.nativeElement.querySelector(<span class=\"string\">'#page_num'</span>).textContent = num;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueRenderPage</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pageRendering) &#123;</span><br><span class=\"line\">       pageNumPending = num;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       renderPage(num);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPrevPage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pageNum &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     pageNum--;</span><br><span class=\"line\">     queueRenderPage(pageNum);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   vm.el.nativeElement.querySelector(<span class=\"string\">'#prev'</span>).addEventListener(<span class=\"string\">'click'</span>, onPrevPage);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onNextPage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pageNum &gt;= pdfDoc.numPages) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     pageNum++;</span><br><span class=\"line\">     queueRenderPage(pageNum);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   vm.el.nativeElement.querySelector(<span class=\"string\">'#next'</span>).addEventListener(<span class=\"string\">'click'</span>, onNextPage);</span><br><span class=\"line\"></span><br><span class=\"line\">   pdfjsLib.getDocument(url).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pdfDoc_</span>) </span>&#123;</span><br><span class=\"line\">     pdfDoc = pdfDoc_;</span><br><span class=\"line\">     vm.el.nativeElement.querySelector(<span class=\"string\">'#page_count'</span>).textContent = pdfDoc.numPages;</span><br><span class=\"line\">     renderPage(pageNum);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p></p><p>结果如下图:</p><p><img src=\"/images/pdf.jpg\" alt=\"\"></p><p><br><br>what!，页面太丑了……与官方的预览页面相比的确有那么一丢丢不满意，没事，下面来说使用本地预览PDF，与官方页面一样哦~~</p><p>预览一存在一个问题：<strong style=\"color:red\">访问网络需要支持翻墙</strong>（啥！还要翻墙，糗~~）。项目上线后大量用户反映无法预览PDF，归根结底就是许多用户根本没有翻墙，被老板狠批一顿，啪啪打脸！！！既然不满足需求，改呗！代码如下：</p><h4 id=\"方案二-不需要翻墙-：\"><a href=\"#方案二-不需要翻墙-：\" class=\"headerlink\" title=\"方案二(不需要翻墙)：\"></a>方案二<strong style=\"color:red\">(不需要翻墙)</strong>：</h4><p>方案二是不需要访问线上资源，本地渲染PDF展示。下载源码: <a href=\"https://github.com/lishaoh/PDF.js\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://github.com/lishaoh/PDF.js</a></p><h5 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1:\"></a>step1:</h5><p>将源码加入到项目中，目录如下：</p><p><img src=\"/images/pdf0.jpg\" alt=\"\"></p><p>在web目录下有viewer.js文件</p><p><img src=\"/images/pdf1.jpg\" alt=\"\"></p><h5 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2:\"></a>step2:</h5><p>在viewer.js 里面做如下修改：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DEFAULT_URL = <span class=\"string\">''</span>; <span class=\"comment\">// 将默认PDF路径路径置为空</span></span><br></pre></td></tr></table></figure><h5 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3:\"></a>step3:</h5><p>在按钮点击事件中调用window.open()</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">referrer</span> <span class=\"attr\">content</span>=<span class=\"string\">never</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"preview()\"</span>&gt;</span>PDF预览<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preview</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> pdf = <span class=\"string\">'pdf的URL'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.open(<span class=\"string\">'./js/pdf/web/viewer.html?file='</span> + pdf, <span class=\"string\">'PDF'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此OK了，老板再也不用当心用户没有翻墙了~~~</p><p>截图如下：</p><p><img src=\"/images/pdf3.jpg\" alt=\"\"></p><!-- rebuild by neat -->"},{"title":"将博客搬至CSDN","shared":false,"date":"2019-03-14T16:00:00.000Z","_content":"\n### 此地址不再维护，具体内容更新请到https://blog.csdn.net/Andrew83","source":"_posts/将博客搬至CSDN.md","raw":"---\ntitle: '将博客搬至CSDN'\ntags:\n    - 个人\ncategories:\n    - 文章\npermalink: csdn\nshared: false\ndate: 2019-03-15\n---\n\n### 此地址不再维护，具体内容更新请到https://blog.csdn.net/Andrew83","slug":"csdn","published":1,"updated":"2019-03-15T05:24:27.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9mdbia000069q358oktetb","content":"<!-- build time:Fri Mar 15 2019 13:26:14 GMT+0800 (CST) --><h3 id=\"此地址不再维护，具体内容更新请到https-blog-csdn-net-Andrew83\"><a href=\"#此地址不再维护，具体内容更新请到https-blog-csdn-net-Andrew83\" class=\"headerlink\" title=\"此地址不再维护，具体内容更新请到https://blog.csdn.net/Andrew83\"></a>此地址不再维护，具体内容更新请到<a href=\"https://blog.csdn.net/Andrew83\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://blog.csdn.net/Andrew83</a></h3><!-- rebuild by neat -->","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<!-- build time:Fri Mar 15 2019 13:26:14 GMT+0800 (CST) --><h3 id=\"此地址不再维护，具体内容更新请到https-blog-csdn-net-Andrew83\"><a href=\"#此地址不再维护，具体内容更新请到https-blog-csdn-net-Andrew83\" class=\"headerlink\" title=\"此地址不再维护，具体内容更新请到https://blog.csdn.net/Andrew83\"></a>此地址不再维护，具体内容更新请到<a href=\"https://blog.csdn.net/Andrew83\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://blog.csdn.net/Andrew83</a></h3><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"cjlyv10e60008cbq3u8qvzrxe","category_id":"cjlyv10e10004cbq3fcqfovt6","_id":"cjlyv10ei000icbq3tsr06ef6"},{"post_id":"cjlyv10dr0000cbq37nt83ie0","category_id":"cjlyv10e10004cbq3fcqfovt6","_id":"cjlyv10ek000lcbq3tsqfkpm4"},{"post_id":"cjlyv10e8000acbq3acarx6qs","category_id":"cjlyv10e10004cbq3fcqfovt6","_id":"cjlyv10el000ncbq3wln2bako"},{"post_id":"cjlyv10ed000fcbq3wl6o59q4","category_id":"cjlyv10e10004cbq3fcqfovt6","_id":"cjlyv10em000pcbq3pj6y3cfz"},{"post_id":"cjlyv10dx0002cbq31r4ohz0v","category_id":"cjlyv10ea000bcbq32lswprep","_id":"cjlyv10em000rcbq3jv5vtuiv"},{"post_id":"cjlyv10eh000hcbq30p6rvzvr","category_id":"cjlyv10e10004cbq3fcqfovt6","_id":"cjlyv10en000tcbq3jcdlrjcu"},{"post_id":"cjlyv10e30006cbq387sj3sot","category_id":"cjlyv10e10004cbq3fcqfovt6","_id":"cjlyv10en000vcbq3v7qtk3zi"},{"post_id":"cjt9mdbia000069q358oktetb","category_id":"cjt9mdbj9000169q3k29qjko1","_id":"cjt9mdbjq000469q382owo2x0"}],"PostTag":[{"post_id":"cjlyv10dr0000cbq37nt83ie0","tag_id":"cjlyv10e20005cbq3s4q0eu49","_id":"cjlyv10ed000ecbq3woj2w8qp"},{"post_id":"cjlyv10dx0002cbq31r4ohz0v","tag_id":"cjlyv10ea000ccbq3a3rq99a7","_id":"cjlyv10ek000mcbq3kla1aaof"},{"post_id":"cjlyv10e30006cbq387sj3sot","tag_id":"cjlyv10ea000ccbq3a3rq99a7","_id":"cjlyv10em000qcbq3i3ydcsc7"},{"post_id":"cjlyv10e60008cbq3u8qvzrxe","tag_id":"cjlyv10el000ocbq384ig47zw","_id":"cjlyv10en000ucbq3lmw4lude"},{"post_id":"cjlyv10e8000acbq3acarx6qs","tag_id":"cjlyv10em000scbq3labpuqxo","_id":"cjlyv10eo000xcbq3vpr9g3c7"},{"post_id":"cjlyv10ed000fcbq3wl6o59q4","tag_id":"cjlyv10em000scbq3labpuqxo","_id":"cjlyv10ep000zcbq3wtfidhhp"},{"post_id":"cjlyv10eh000hcbq30p6rvzvr","tag_id":"cjlyv10em000scbq3labpuqxo","_id":"cjlyv10ep0010cbq3hz10dz0y"},{"post_id":"cjt9mdbia000069q358oktetb","tag_id":"cjt9mdbjd000269q39yfml2fk","_id":"cjt9mdbjl000369q3oey56qps"}],"Tag":[{"name":"CSS","_id":"cjlyv10e20005cbq3s4q0eu49"},{"name":"微信公众号","_id":"cjlyv10ea000ccbq3a3rq99a7"},{"name":"小程序","_id":"cjlyv10el000ocbq384ig47zw"},{"name":"JS","_id":"cjlyv10em000scbq3labpuqxo"},{"name":"个人","_id":"cjt9mdbjd000269q39yfml2fk"}]}}